#+CATEGORY: Strasheela

* Strasheela release

** TODO Heuristic constraints support				     :URGENT:


*** Add heuristic defs to functor H

 see constraint ideas in TODO section in that functor

# OK - port Jacopos heuristic constraints from JBS-constraints to Strasheela (avoid too much repetition, though: generalise)

# OK - port OMClouds constraints as heuristics to Strasheela
   
*** Heuristic "global constraints"
    
    See 

*** Revise SDistro.heuristicValueOrder

#    - OK Allow to randomise solution, but with support for recomputation

    - Efficiency: ParamPos accessed multiple times (below accessed again, somehow store this info instead)

    - Consider making SDistro.heuristicValueOrder the default ordering


*** Allow for randomised heuristic constraint definitions 

    - randomisation with recomputation support


*** Some heuristic constraints depend on variable ordering (e.g., Distinct)

    How to address this problem?

**** Distict (i.e. AllDifferent)

 Problem: effective implementation depends of variable ordering: for
 every visited parameter of a certain parameter sequence the
 constraint always takes all parameters values that are already
 determined into account.

 I would need alternative to Score.apply_H in order to do that (should
 not add heuristic to all params involved, but only to always only the
 one that is still undetermined when the heuristic is actually
 used. Also SDistro.heuristicVariableOrdering would require revision,
 because I should not need to "search" for current parameter then, but
 have a different format where the current parameter is given extra or
 its position in params list is stored as well)


*** Revise Score.apply_H doc

*** Show in example that heuristic constraints can be applied to arbitrary contexts

    even contexts that are undetermined in CSP definition, e.g., simultaneous notes if rhythm is undetermined
    E.g., use Smapping.forSimultaneousPairs


** Finish def of ResolveDissonances_ChordDegree

   [[file:~/oz/music/Strasheela/strasheela/trunk/strasheela/examples/Harmony-Examples/Schoenberg-TheoryOfHarmony.oz::proc%20ResolveDissonances_ChordDegree%20Notes%20Args%20Args%20unused][file:~/oz/music/Strasheela/strasheela/trunk/strasheela/examples/Harmony-Examples/Schoenberg-TheoryOfHarmony.oz::proc ResolveDissonances_ChordDegree Notes Args Args unused]]

   e.g., 
   - documentation
   - generalise such that it constraints chords not only notes, so it can be used for non-homophonic music too (resolution in "wrong" octave OK, but that should actually happen more rarely?)


** TODO Add support for microtonal music to Fenv.renderAndPlayMidiFile

   [[file:~/oz/music/Strasheela/strasheela/trunk/strasheela/contributions/anders/Fenv/Fenv.oz::proc%20RenderAndPlayMidiFile%20MyScore%20Args][file:~/oz/music/Strasheela/strasheela/trunk/strasheela/contributions/anders/Fenv/Fenv.oz::proc RenderAndPlayMidiFile MyScore Args]]

*** DONE							    :ARCHIVE:

    Approach: user explicitly specifies for each MIDI chan in score (new arg to Fenv.renderAndPlayMidiFile) over which actual MIDI chans it will be distributed. Number of actual MIDI chans should be max number of sim notes of this score chan. Microtonal notes will then be distributed to given MIDI chans in round-robin fashion, and pitchbind will be added according to score pitch.
    MIDI chans specified zero-based

    ?? Default for unspecified MIDI chans: 
    - use only this chan, i.e. only supported for monophonic voices
    - 'warn': user is warned that this chan only supports monophonic MIDI by default

    Args:
    resolution: pitchbend resolution
    channelDistribution: tuple specifying which score chan is output to which actual chan, e.g. for distributing chan 0 over chans 0-7 do
       	unit(0: [0 1 2 3 4 5 6 7])



*** TODO test microtonal MIDI output

*** TODO 

    If note already has pitchbend fenv, then add offset to this pitchbend fenv such that 0 corresponds to its microtonal pitch

    Use Out.midi.noteToPitchbend to get offset value

    Approach: Change this in Fenv.itemFenvsToMidiCC (i.e. check when Controller==pitchbend and then optionally shift that fenv depending on some new arg to Fenv.itemFenvsToMidiCC), and then also change all defs using it (only defs in Fenv)


** MIDI output: use ports/tracks

   csvmidi seems to support MIDI ports, so I can have > 16 chans in total  

   !! Ports are used as tracks in Cubase??

   ----

   Doc: http://www.fourmilab.ch/webtools/midicsv/    
   /Track, Time, MIDI_port, Number/
   This meta-event specifies that subsequent events in the Track should be sent to MIDI port (bus) Number, between 0 and 255. This meta-event usually appears at the start of a track with Time zero, but may appear within a track should the need arise to change the port while the track is being played. 

   -> I would likely need to refactor MIDI file output such that multiple tracks are output...



** Lilypond: output seq (of seq ...) of sims with multiple staffs 


* Strasheela examples


* Strasheela Bugs

** TODO BUG: getOffsetTimeInSeconds  no dependency to tempo curve or time shift function defined yet, depends on type of temporal container

** TODO BUG: tempo setting affects Csound and MIDI output differently

%% BUG: MIDI tempo not OK

declare
%% set playback tempo
{Init.setTempo 70.0}
%% Create test score
MyTestScore = {Score.makeScore
	       seq(items:[note(duration:2
			       pitch:60
			       amplitude:80)
			  note(duration:2
			       pitch:64
			       amplitude:60)
			  note(duration:2
			       pitch:67
			       amplitude:50)
			  note(duration:6
			       pitch:72
			       amplitude:100)
			 ]
		   startTime:0
		   timeUnit:beats(4))
	       unit}


%% Just in case: wait until 
{MyTestScore wait}


%% Csound output 
{Out.renderAndPlayCsound MyTestScore
 unit(file:myTestScore)}

%% MIDI output
{Out.midi.renderAndPlayMidiFile MyTestScore
 unit(file:myTestScore)}


** Fix bugs

   HS.rules.maxRepetitions

   HS.rules.expressEssentialChordPCs


* Strasheela design						    :STRASHEELA:

** Diss resolution
   [[file:Strasheela-Maybe-TODO.org::*Introduce%20some%20generalised%20concept%20of%20resolution%20of%20dissonances][file:Strasheela-Maybe-TODO.org::*Introduce some generalised concept of resolution of dissonances]]

** TODO Fenv.renderAndPlayMidi: add Fenv controlling articulation (note length)
   
   ?? Fenv value is note duration factor 
   E.g., 0.8 results in some non-legato, 1.1 is legato, 0.3 is staccato
   
   Or is addition better than multiplication
   I feel multiplication is more flexible, but sometimes I may want to add instead
   ?? can I somehow generise and allow for both options?


** TODO Create variant for Out.saveScore using pickles

   Some score objects (e.g., Fenvs which contain procs) cannot be translated into text (code), i.e. cannot be "archived". However, they could be picked! 

   On the other hand, pickling not supported for undetermined values. Can I have an approach which works for both cases (translates undetermined vars into text/code which would be compiled into Oz values during loading.)

   Alternative idea for storing Fenvs to textual format: store approximated Fenv (sample Fenv and create envelope from sampling data)


** Define how fenvs of prototype motifs can be variated with motif instance arguments 

   [this is actually a Strasheela TODO..]

   See [[file:MidiOut_toTassman/MusicRepresentationForTassmanPiece.org::*Prototype%20Motif%20Variation][file:MidiOut_toTassman/MusicRepresentationForTassmanPiece.org::*Prototype Motif Variation]]

*** TODO Extend ProtoMotif 'scriptArgs'

    see [[file:MidiOut_toTassman/MusicRepresentationForTassmanPiece.org::*Prototype%20Motif%20Variation][file:MidiOut_toTassman/MusicRepresentationForTassmanPiece.org::*Prototype Motif Variation]]

*** TODO Check my ideas out with simple motif prototype (e.g., with fenvs at different levels) and motif instance args 

     See [[file:MidiOut_toTassman/MusicRepresentationForTassmanPiece.org::*Prototype%20Motif%20Variation][file:MidiOut_toTassman/MusicRepresentationForTassmanPiece.org::*Prototype Motif Variation]]
   



     
* Strasheela doc

** DONE Ask Oz mailing list: can we feed expressions to OPI and get result back from Emacs Lisp?
   CLOSED: [2010-03-04 Thu 11:16]

** DONE Add org-babel-oz.el to Org-babel
   CLOSED: [2010-03-04 Thu 11:16]

** DONE Write doc for org-babel-oz.el
   CLOSED: [2010-03-04 Thu 11:16]

   for draft see [[file:~/oz/music/Strasheela/StrasheelaDoc_Rewrite/setup/org-babel-oz-doc.org]]

*** Grab a copy of worg

    see http://orgmode.org/worg/worg-git.php

*** Write file

    file:~/emacs/org-mode/Worg/org-contrib/babel/org-babel-oz.org

    Suggestions:
    http://orgmode.org/worg/worg-editing.php

    "Templates"
    file:~/emacs/org-mode/Worg/org-contrib/babel/org-babel-screen.org 
    file:~/emacs/org-mode/Worg/org-contrib/babel/org-babel.org 
    

*** Push this file with git

    Learn how to do git push, see http://orgmode.org/worg/worg-git.php

**** First time

cd ~/emacs/org-mode/Worg/org-contrib/babel/
git add org-babel-oz.org
git commit -a -m "My changelog"
git push


PERHAPS: if push does not work as above

git remote add public git+ssh://tanders@repo.or.cz/srv/git/Worg.git
git push public


    Use your ssh passphrase (if requested again): bach1685

**** Later

cd ~/emacs/org-mode/Worg/
git commit -a -m "My ChangeLog"
git push

  
** Strasheela tutorial

   Use Worg CCS, but add acknowledgment mentioning CCS authors Bastien Guerry and Sebastian Rose.

** Inform Oz community about org-babel-oz


* Other 

** GeOz 
   
*** Mail with important info to installation and doc

    [check Mail app for formatted version of this mail]

Dear Gustavo,

I am extremely sorry for the delay (we have 6-month old twins and  
there has been a flu, later your mail got buried under other stuff).

On 04.10.2009, at 11:52, Gustavo Gutierrez wrote:
On Wed, Sep 23, 2009 at 3:10 PM, Torsten Anders <torsten.anders@plymouth.ac.uk 
wrote:
PS: In the long run, I am interested to update Strasheela (http://strasheela.sourceforge.net 
) to use Geoz instead of the "classical" Oz constraint facilities.  
So, I am very much interested in the future of Geoz :)


That's really great, I think we can benefit from trying the new  
mozart implementation with your application. In this way we can  
identify bugs and fix them before releasing. What do you think?

This certainly makes sense and I would like to go for it.  
Unfortunately, I currently have hardly any time for Strasheela  
development at all due to various other duties. If all goes as  
planned, then I will again have time and even co-workers starting  
summer 2010. So, my question is: what is your time schedule for Mozart  
development?

On 04.10.2009, at 11:52, Gustavo Gutierrez wrote:
On Wed, Sep 23, 2009 at 3:10 PM, Torsten Anders <torsten.anders@plymouth.ac.uk 
wrote:
Dear Gustavo,

The question concerning the Oz Explorer vs Gist and Gecode reminded  
me: what is actually the current status of the Geoz project?  
Obviously you frequently submit changes to the mozart-gecode  
branch, but the available public information has not been updated  
for a long time. E.g., here are a few related links which seem to  
be out of date.

http://cic.puj.edu.co/wiki/doku.php?id=grupos:avispa:geoz
http://gna.org/projects/geoz

So, what is the current status? Is the installation process  
documented somewhere (up to date)?

The installation is not documented, however it is not to difficult.  
The only thing needed is an specific version of gecode. The best way  
to do this is try to download the sources and then run configure. It  
will try to find the right gecode version and will inform you about  
anything you need.

I see. So, before actually installing Gecode I just ran the configure  
script on the latest SVN version of mozart-gecode and it told me that  
Gecode version 2.2.0 is required. Will the required Gecode version be  
updated later?

Are the changes of Geoz compared with the "classical" Oz constraint  
facilities documented somehow?

One of the last commits handled this point. If you try to build the  
documentation then you will see some new sections which are intended  
to present this facilities. The documentation is not finished and  
has not been reviewed by anyone so it may contain english errors but  
anything you need I am willing to help.

It is great to hear that you started updating the documentation to  
this effect. I will not attempt building the documentation (too many  
dependencies), but try to study the SGML sources. I just saw that you  
updated files in doc/fdt/. I will try to find out your changes by  
checking the SVN history. For example, I found

http://gforge.info.ucl.ac.be/plugins/scmsvn/viewcvs.php?view=rev&root=mozart&revision=17245
 	
I am particularly interested in the graph constraints -- what is  
the situation there? What version of Gecode is supported?

This is my main current work right now. We have an implementation of  
graph constraints but it is still in gecode and not in mozart. The  
thing is that we need to work a lot on efficiency at the c level  
before bringing the interface to mozart. If you want to try them  
anyway I can point you in the right direction. So far we have a good  
design but the problem we are trying to solve has shown us that  
there is some pending work on handling big graphs. Just to give you  
an impression of what I am talking about, we have a propagator  
between two graph variables and one of them is a graph with around  
11'000.000 edges. This is obviously quite big and we ran out of  
memory.

Wow, these figures are impressive!

Best wishes,
Torsten


*** TODO Install GeOz 
    
    NOTE: development of Gecode/J is discontinued. So, I better stick with Mozart/Oz. But then it would be a good idea to support gustavo getting Gecode running for Oz. E.g., moral support by installing it and asking questions, also finding bugs perhaps..

    First ask  gustavo.ggutierrez@gmail.com whether meanwhile graph constraints are working again

1) Download gecode sources (we don't have support for binary distributions yet) and build them. In the install directory there will be a lib/pkgconfig subdir. Export the shell variable PKG_CONFIG_PATH to /Users/u/install/lib/pkgconfig. For this you need pkg-config installed, if not, download it form http://www.rudix.org/packages.html .

2) With the previous variable exported, the mozart configure will properly detect gecode. Then, just configure mozart (with debug support if you want) and install it.

3) Now, you should have a working installation of the development branch and you can take a look at mozart-gecode/share/examples/gfd for the examples. That will give you and impression of the changes from the user level.

If problems occur ask gustavo.ggutierrez@gmail.com


*** Check out documentation

    The reference doc is updated to reflect the new constraint system
    Wait/ask gustavo.ggutierrez@gmail.com to render the HTML files

*** Check out examples

    How did coding style change? What else did change

    file:/Users/t/oz/mozart/branches/mozart-gecode/mozart/share/examples/gfd/

    possibly create new small-scale examples for testing and to better understand

**** FD constraints (including selection constraints)
**** FS constraints
**** !! Graph constraints
     
     currently broken in Gecode 2.*
     gustavo.ggutierrez@gmail.com said this should be fixed in about 1-2 months time (i.e. mid Oct-Nov)

**** Space combinators 


*** Check out how performance of examples 

    Noticable difference of old version?


** TODO Read Strasheela doc						  :EASY:

   know your system, e.g., know all my Patterns 



 
