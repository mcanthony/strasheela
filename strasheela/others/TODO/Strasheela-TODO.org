#+CATEGORY: Strasheela

* Strasheela release

* TODO Backup Strasheela SVN repository on Office Mac

  see 
  [[file:~/oz/music/Strasheela/sourceforge-howto/backup-howto.muse::Backup%20of%20the%20SVN%20repository][file:~/oz/music/Strasheela/sourceforge-howto/backup-howto.muse::Backup of the SVN repository]]

  This seems never to work. 
  Could uni firewall be problem? 
  - http://samba.anu.edu.au/rsync/FAQ.html#6
  - http://samba.anu.edu.au/rsync/firewall.html


  cd /Volumes/Data/Backup/Strasheela-SVN-repository 
  rsync -av strasheela.svn.sourceforge.net::svn/strasheela/* .

rsync: failed to connect to strasheela.svn.sourceforge.net: Operation timed out (60)
rsync error: error in socket IO (code 10) at /SourceCache/rsync/rsync-24.1/rsync/clientserver.c(94)




* Strasheela examples

** TODO Realtime example with non-harmonic tones etc. for Eduardo

*** TODO Do expresssive performance (timing and velocity)


* Strasheela Bugs

** TODO Bug: Archiving score (e.g., with Out.saveScore) with strings: double quotes of strings are lost

declare
MyScore = {Score.makeScore note(info:"test")
	   unit}

{Out.saveScore MyScore unit}

% then check output test file..

** TODO BUG: getOffsetTimeInSeconds  no dependency to tempo curve or time shift function defined yet, depends on type of temporal container

** TODO BUG: tempo setting affects Csound and MIDI output differently

%% BUG: MIDI tempo not OK

declare
%% set playback tempo
{Init.setTempo 70.0}
%% Create test score
MyTestScore = {Score.makeScore
	       seq(items:[note(duration:2
			       pitch:60
			       amplitude:80)
			  note(duration:2
			       pitch:64
			       amplitude:60)
			  note(duration:2
			       pitch:67
			       amplitude:50)
			  note(duration:6
			       pitch:72
			       amplitude:100)
			 ]
		   startTime:0
		   timeUnit:beats(4))
	       unit}


%% Just in case: wait until 
{MyTestScore wait}


%% Csound output 
{Out.renderAndPlayCsound MyTestScore
 unit(file:myTestScore)}

%% MIDI output
{Out.midi.renderAndPlayMidiFile MyTestScore
 unit(file:myTestScore)}


* Strasheela design						    :STRASHEELA:

** TODO Archive Fenvs by approximation (sampling the Fenv)

   I may use linear Fenvs or something similar. May result in long code files (if approximation/sampling has high rate), but this is at least some easy and working solution
   
** TODO Create variant for Out.saveScore using pickles

   Some score objects (e.g., Fenvs which contain procs) cannot be translated into text (code), i.e. cannot be "archived". However, they could be picked! 

   On the other hand, pickling not supported for undetermined values. Can I have an approach which works for both cases (translates undetermined vars into text/code which would be compiled into Oz values during loading.)

   Alternative idea for storing Fenvs to textual format: store approximated Fenv (sample Fenv and create envelope from sampling data)


** Define how fenvs of prototype motifs can be variated with motif instance arguments 

   [this is actually a Strasheela TODO..]

   See [[file:MidiOut_toTassman/MusicRepresentationForTassmanPiece.org::*Prototype%20Motif%20Variation][file:MidiOut_toTassman/MusicRepresentationForTassmanPiece.org::*Prototype Motif Variation]]

*** TODO Extend ProtoMotif 'scriptArgs'

    see [[file:MidiOut_toTassman/MusicRepresentationForTassmanPiece.org::*Prototype%20Motif%20Variation][file:MidiOut_toTassman/MusicRepresentationForTassmanPiece.org::*Prototype Motif Variation]]

*** TODO Check my ideas out with simple motif prototype (e.g., with fenvs at different levels) and motif instance args 

     See [[file:MidiOut_toTassman/MusicRepresentationForTassmanPiece.org::*Prototype%20Motif%20Variation][file:MidiOut_toTassman/MusicRepresentationForTassmanPiece.org::*Prototype Motif Variation]]
   




* Other 

** GeOz 
   
*** TODO Install GeOz 
    SCHEDULED: <2008-12-08 Mon>
    
    First ask  gustavo.ggutierrez@gmail.com whether meanwhile graph constraints are working again

1) Download gecode sources (we don't have support for binary distributions yet) and build them. In the install directory there will be a lib/pkgconfig subdir. Export the shell variable PKG_CONFIG_PATH to /Users/u/install/lib/pkgconfig. For this you need pkg-config installed, if not, download it form http://www.rudix.org/packages.html .

2) With the previous variable exported, the mozart configure will properly detect gecode. Then, just configure mozart (with debug support if you want) and install it.

3) Now, you should have a working installation of the development branch and you can take a look at mozart-gecode/share/examples/gfd for the examples. That will give you and impression of the changes from the user level.

If problems occur ask gustavo.ggutierrez@gmail.com


*** Check out documentation

    The reference doc is updated to reflect the new constraint system
    Wait/ask gustavo.ggutierrez@gmail.com to render the HTML files

*** Check out examples

    How did coding style change? What else did change

    file:/Users/t/oz/mozart/branches/mozart-gecode/mozart/share/examples/gfd/

    possibly create new small-scale examples for testing and to better understand

**** FD constraints (including selection constraints)
**** FS constraints
**** !! Graph constraints
     
     currently broken in Gecode 2.*
     gustavo.ggutierrez@gmail.com said this should be fixed in about 1-2 months time (i.e. mid Oct-Nov)

**** Space combinators 


*** Check out how performance of examples 

    Noticable difference of old version?


** TODO Read Strasheela doc					     :SOON:EASY:

   know your system, e.g., know all my Patterns 







