
* Strasheela examples						    :STRASHEELA:

** Add new Fenv examples to [[file:~/oz/music/Strasheela/strasheela/trunk/strasheela/examples/ContinuousControllersInScore-MidiOutput.oz]]      :NEXT:

*** TODO Archive Fenvs with score 

Transform with toInitRecord and then pickle with Score.saveScore

*** TODO Tempo curve example 
*** TODO Example with hierarchy of tempo curves and time shift functions 

Wait for tempo curve related code to be finished...


** TODO 'Interesting arpeggio' example [[file:~/oz/music/Strasheela/private/examples/forOlleRomo/Arpeggio.oz][Arpeggio.oz]]		       :NEXT:

  ?? Duration working time: 1d -- probably more :)

  an example for Olle Romo
  see description in strasheeela support tracker
  
  https://sourceforge.net/tracker/index.php?func=detail&aid=1883452&group_id=167225&atid=842099
  

  Olle:
  An example generating a 16 bar 4/4 16th notes arpeggio based on a given
  chord sequence and scale/mode. The note length and velocities change
  according to a given function - a sine shape for example.
  
  
  Torsten:
  I don't fully understand: do you mean a 'grid' of 16th notes (i.e.
  that is the shortest note value possible)? If you want to shape your
  durations with a function, then you don't have all durations of the
  same length :)
  
  As far as I understand you, you predetermine the chord progression
  and the function(s) shaping note parameters likes durations and
  loudness. What are your actual constraints? Should each bar form a
  simple arpeggio upwards where the note pitches only express pitch
  classes from the underlying chord? If this is the only constraint,
  then you can realise this even without constraint programming (e.g.,
  in Common Music -- a system you mentioned before).
  
  Still, it can also be done in Strasheela, all the building blocks are
  there. The music representation (notes, chords, scales) can be based
  on Strasheela's harmony model (functor HS) and function-based
  envelopes are provided in the functor Fenv.
  
  
  Olle:
  Sorry, I meant a grid. Notes quantized to a 16th note grid where the
  durations can vary independently of the start times.
  
  By arpeggios I mean various phrases running within the given chord/mode. It
  can be single 16th notes forming musical phrases and not just running up
  and down scales. Certain notes can harmonise with 2 or 3 voices, etc...
  
  Olle:
  
  16th note arpeggio. Limit the note range. Stay within a given (16 measure)
  chord structure. No more than two successive notes at the same pitch.
  Duration pattern repeats each 2 measures - first measure the lower notes
  are shorter and the higher notes are longer. Second measure the reversed.
  Velocity pattern repeats each 4 measures.
  
  Voice one pattern repeats each measure exept for the first note. First note
  of each measure alternates between tonic and fifth.
  
  Each repeated pitch is lower in velocity than the preceding note. Each time
  voice one and two plays simultaneously velocity is 60. Otherwise it is set
  at 90.
  
  Voice two repeats over two bars and plays no more than two notes in
  succession without an intervening 16th note pause. Always in a higher
  harmony to voice one. Still within the note range. Always the same duration
  and velocity as voice one.


** TODO Muzak Beispiel mit Kilian 

   
* Strasheela design						    :STRASHEELA:

** Time curves etc [[file:~/oz/music/Strasheela/private/examples/forOlleRomo/TempoCurves-etc.oz][TempoCurves-etc.oz]] 					  :NEXT:

Goal: user can freely define tempo curve and time shift curve for any temporal container in score 

It should be relatively straitforward to access the performance time of any score time of a temporal item (e.g., note start and end times) depending on all temporal containers the item is contained in

See my notes on paper...


*** TODO Make test/prototype how to combine tempo curves and time shift curves and how to access performance value for given score value

*** TODO Make simple prototype how timing fenvs are accessed from parent temporal containers

*** TODO Address problem: timing fenvs of different containers depend on startTime/endTime of the containers: make abstraction expecting container, fenv and score time point and returning performance time point 

Does this pose any additional problems to the combination of fenvs 

*** TODO Abstract this: make approach of both prototypes easily usable 

deadl with case that not every container gets time shift curve and tempo curve

e.g., extend music representation, but perhaps there are more simple ways 


*** TODO Make test/example which produces sound output 


** TODO [#A] optimal solution for CSPs with soft constraints

Design CSP template / abstractions with which I can model soft constraints by reified constraints and rate them in importance. A best-solution-search will find an optimal solution 



** TODO 1W Refactor harmony model

*** Harmony model: Databases as arg for object creation

Presently there is only a global chord, scale etc database 

I should keep a global database as an option, because this is most suitable for most CSP. Additionally, it should be possible to give the databases to score objects (chords, scales, ..) as optional init argument -- the init arg defaults to the global database.

This refactoring requires that all database accessors expect a score object (chord, scale ..) or its database as argument. 
Possibly, I leave the old database accessors and setters as is (i.e. without additional object/database arg) for compatibility of the old examples. 
In that case, I need to define new additional accessors which expect the object/database arg, and the doc of both the new and the old accessors/setters must make these two options using databases very clear.

*** [#C] Harmony model: Clean up doc

This is partly done already..


** TODO Extend meter model [[file:~/oz/music/Strasheela/strasheela/trunk/strasheela/contributions/anders/Measure/Measure.oz][Measure.oz]]

  - extend meter model for changing meter

  - test constraining metric structure with sim meter: for accessing potentially inaccessible context sim meter use delaying constraints: filter and test with a reified constraint together with an equality test

{ForAll {MyScore filter($ fun {$ X}
			     {IsMeasure X} andthen
			     {MyNote isSimultaneousItemR($ X)} == 1
			  end)}
 MyConstraint}


   - !!?? there was some idea of "Orjan which I wanted to incorporate to Strasheela and for which I needed this delayed constraints approach..? 
     Was it harmony rule depending on metric structure? For example, no non-chord tones on strong beat

   - Optional: lilypond output for metric structure


** Multi-core  processing

*** DONE Reread Oz distributed programming (van Roy)

Play around with the possibilities: create multiple sites (on localhost simply for now) and communicate between them 

*** DONE Test: multiple Oz sides are independent processes on the computer

That is: test whether multiple processes can run on different CPUs

*** DONE Simple CSP with parallel search

Check whether multiple CPUs are used  


*** DONE Simple Musical CSP with parallel search

How does communication of data structure slow down the process?


** TODO Update Lilypond output 

Lilypond export outputs only rather old version. Meanwhile, Lilypond handles nested scores (quasi sim/seq containers) better than old version, but behaviour of old version is pertained when using Lily's conversion script. So, I should update my Lily output to a more Lily syntax version


** TODO add a score transformation with allows to restructure a Strasheela score hierarchy in a highle generic wasy (e.g. for outputting the fixed hierarchies of ENP-notation, Lilypond, MIDI...)

   - it would be great if in a transformed and more flat representation the info on the previous hierarchic representation is still retained (e.g. added to item info: 'begin(<marker>)' and 'end(<marker>)'). When the more flat representation is then output (e.g. to lilypond, ENP-notation or MIDI), these markers could be used to somehow retain the old nesting in the output format (e.g. to draw analysis brackets in Lilypond or ENP, or as text events in MIDI out). When the output music is edited, it could later perhaps be loaded into Strasheela again and the old hierarchy could be restored??


** Refactoring 

*** TODO [#A] Concurrent method filter (filterThreaded) which does return stream instead of list: as soon as enough information is available on specific score object to fulfull given test function, add it to stream. Close stream as soon as it is known that no further elements will be added.

NOTE: this matter could make it into a publication (part of a publication)! 

Related approach: find using filter + reified constraints as boolean tests is related but note the same. 

However, even if boolean test would return true for some datum already, find blocks if reified constraint blocks on some element before. This new approach works even when I don't know in which order variables are determined and thus in which order elements are added to the stream. 

Similar issue with filter: even with reified constraints as boolean tests, filter may block completely until enough information is available in all data. An concurrent filter would return data in a stream as soon as enough information is available on these data.
 
Sufficient to have a filter which concurrently processes a list of objects. I only need to collect all data with collect (e.g., all data matching test function) and then do concurrent filter on this result list. 

A method filterThreaded would further improve the application of delayed constraints where filtering tests used reified constraints 
E.g., I could use a method filterThreaded for a better definition of getSimultaneousItems


*** TODO refactor output means: they are inconsistend, perhaps not general enough etc. :MAYBE:

  - output of 'non-existing' timed items (e.g. notes of duration 0) -- skip

  - !!?? make MakeEvent2CsoundFn more general: Idea Spec is either some
     method (e.g. an accessor) or some unary function which gets
     object as arg.

  - refactor Lilypond output to use the (still to program) score transformation with allows to restructure a Strasheela score hierarchy

** Efficiency

# <<RandomDistribution>> 
*** [#A] Refactor Strasheela distribution: recomputable support for random distribution :NEXT:


**** DONE Create SVN branch
     CLOSED: [2008-02-13 Wed 17:49]

**** TODO Read howto merge changes of branch back to trunk

     decribed here:     
     http://svnbook.red-bean.com/en/1.4/svn.branchmerge.commonuses.html
     
     record info here: 
     [[file:~/oz/music/Strasheela/sourceforge-howto/svn-HOWTO.muse::Merging%20a%20Whole%20Branch%20to%20Another][file:~/oz/music/Strasheela/sourceforge-howto/svn-HOWTO.muse::Merging a Whole Branch to Another]]
     

**** TODO Check out: there was an example for which it worked already

     Understand orig example by Raphael
     
     [[file:~/oz/music/Strasheela/strasheela/branches/strasheela-randomValueOrdering/strasheela/others/TODO/Refactor-ScoreDistribution.oz]]


**** TODO Change score solver interface in ScoreDistribution.oz so that it works for all cases 

BTW: you may wan to create a Strasheela variant of the general solver object 

**** TODO Change all solver calls in Strasheela if necessary -- check with my scripts like find-all

this will take most time and is error prone, which is why I created a branch...



*** TODO [#A] check out performance with adaptive recomputation

  Adaptive recomputation is highly recommended by Schulte, so I should possibly do this before investigating other approaches to improve efficiency
     
  -> for this I most of all need a nicely working 'select random value' distribution which can be recomputed

# <<ScoreOutsideScript>> 
*** TODO [#A] Does score outside script/space save memory. If so, define abstractions/templates for having the score outside the script

See ../../testing/zy_Efficiency/KeepMusicRepresentationOutsideComputationalSpace.oz 

**** Measure how the different approaches differ in the amout of memory (and time) comsumed by copying.

 Approaches:

  - !! Measure total amount of memory and time required by search (e.g. put each script in an application of its own, call plain solver and measure time and memory with UNIX tools such as time and ...)
    -> which UNIX tool measures memory consumption of a call?

  - !!?? Measure with Oz profiler:
    problem: the memory/time comsumption of copying seems not to show if I just compile CSP with profiling information.
    Alternative option: temporarily, compile whole Mozart with profiling and check memory consumption of space copying proc (results will be very hard to read in this case!) 


****  _if_ I found out that memory reduction can be significantly reduced by defining the music representation outside the script/space, then I have to develop abstractions/templates for the following cases (it will be more complex than having the score inside the script, but it shouldn't be too hard..).


  - distribution strategies
  - implicit constraints
  - expressive rule applications 


**** split Strasheela in two parts: the part to define CSPs and the part to solve them. The solver part uses a very [speichersparende] representation based on records instead of classes and objects (i.e. I need to define/port the data abstraction interface required for distribution strategies). 

     -> I did some profiling to better understand this issue (see Strasheela/texting/profiling.oz)
     
       - Memory requirement of Strasheela mainly caused by elaborated data structure: there is so much explicitly represented. A more efficient data representation for the search would dump all information not required by the CSP: this is a very difficult task!!

         -> BTW: the memory difference between a record-based and an OOP based data structure appears to be neclegtable


***** The Solver 'the server'
     
      - The solver expects a CSP spec which specifies the music representation (with a unique ID for each variable) and a list of constraints which specify which variables are constrained by which constraint (aux variables also supported by the constraint spec).
      Also distribution strategy defined by spec.

      - This solver then creates the search script from the CSP spec 
     
      - This solver is much more efficient than current Strasheela: much less copying because much smaller data structure

      - The solver would be even more efficient if it could apply batch recomputation: wait for Geoz..
  
***** The second part of Strasheela (the 'client') defines the CSP specs: the present Strasheela could be modified to do this. It is even possible, that the present Strasheela could be modified such that it either does the search directly itself or alternatively creates this CSP spec (this option could be useful for prototyping and also helps to keep the present application a running program ..).

     - The CSP def part of Strasheela could/would mirror _every_ propagator defined by Oz. All constraints in a Strasheela program would be replaced my its Strasheela substitute. With a global switch (init variable/cell?) the user could decide whether the Strasheela constraint substitutes either just apply the orig Oz constraint or otherwise 'record' this constraint call for the CSP spec by denoting the name of the constraint and the unique IDs of all its argument vars 

       !! -> How to access the ID when the constraint gets the variable directly?? I would need to rewrite all Strasheela programs such that every Strasheela constraint substitute always expects parameter objects instead of variables!

***** Instead with this Strasheela 'client', other CAC applications could also create CSP specs and call the Strasheela 'server' (e.g. PWGL)

* Strasheela documentation					    :STRASHEELA:

** Strasheela tutorial

*** DONE Strasheela tutorial: finish music representation 'chapter'
*** TODO Strasheela tutorial: do music constraint programming 'chapter'

*** TODO Email Tobias Kunze: CM CSS verwendet...


* Strasheela installation					    :STRASHEELA:


* Collecting new ideas

** TODO Lesen XMG



* General Oz todo							    :OZ:


** Oz Path							   :@NET:URGENT:

*** TODO svn update my mozart

*** TODO Incorporate my changes (see my tmp Strasheela functor) into Mozart Path functor

When finished commit these changes. 

Possibly, I do step-by-step commits -- but only if this does not complicate matters


*** TODO Update Path doc 

Edit the SGML files for Path functor (see comments in my tmp Strasheela functor)


*** TODO Oz Path: test cases

Decision: do simple solution: add a test file close to either Path source or its doc source
Then report it on the Oz mailing list with request for improvement if necessary. 
Also, somewhere in source code (and doc??) put pointer to test file. 

---- 

Thinking process:  

There is no test suite yet for the Mozart standard library

Simple solution: add a test file close to either Path source or its doc source

Better but much mroe complex solution: check how test suite is done for Mozart base system and do something similar. 
I probably need to specify test cases then with expected output -- how complex is that, as I don't know file system of computer on which test suite is run 

Problem: I must fully understand how test suite is run for base system
Problem: should that be called automatically when certain tests are executed? Where is that called 




** Collozeum

*** TODO Collozeum: make projects available at Mogul

*** TODO ozcurl/ozjs TODO: add ozmake makefile			    :MAYBE:


** OPI:  

*** Emacs TAGS for Oz and Strasheela 

this does already work in principle, but I need 'to prefix' the functor variable before each TAGS entry

[[file:~/oz/music/Strasheela/strasheela/trunk/strasheela/scripts/generate-TAGS.sh::fun%20Foo%20Foo56%201566][file:~/oz/music/Strasheela/strasheela/trunk/strasheela/scripts/generate-TAGS.sh::fun Foo Foo56 1566]]




