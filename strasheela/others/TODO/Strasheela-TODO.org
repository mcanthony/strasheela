#+CATEGORY: Strasheela

* Strasheela release

** Finish def of ResolveDissonances_ChordDegree

   [[file:~/oz/music/Strasheela/strasheela/trunk/strasheela/examples/Harmony-Examples/Schoenberg-TheoryOfHarmony.oz::proc%20ResolveDissonances_ChordDegree%20Notes%20Args%20Args%20unused][file:~/oz/music/Strasheela/strasheela/trunk/strasheela/examples/Harmony-Examples/Schoenberg-TheoryOfHarmony.oz::proc ResolveDissonances_ChordDegree Notes Args Args unused]]

   e.g., 
   - documentation
   - generalise such that it constraints chords not only notes, so it can be used for non-homophonic music too (resolution in "wrong" octave OK, but that should actually happen more rarely?)


** TODO Add support for microtonal music to Fenv.renderAndPlayMidiFile

   [[file:~/oz/music/Strasheela/strasheela/trunk/strasheela/contributions/anders/Fenv/Fenv.oz::proc%20RenderAndPlayMidiFile%20MyScore%20Args][file:~/oz/music/Strasheela/strasheela/trunk/strasheela/contributions/anders/Fenv/Fenv.oz::proc RenderAndPlayMidiFile MyScore Args]]

*** DONE							    :ARCHIVE:

    Approach: user explicitly specifies for each MIDI chan in score (new arg to Fenv.renderAndPlayMidiFile) over which actual MIDI chans it will be distributed. Number of actual MIDI chans should be max number of sim notes of this score chan. Microtonal notes will then be distributed to given MIDI chans in round-robin fashion, and pitchbind will be added according to score pitch.
    MIDI chans specified zero-based

    ?? Default for unspecified MIDI chans: 
    - use only this chan, i.e. only supported for monophonic voices
    - 'warn': user is warned that this chan only supports monophonic MIDI by default

    Args:
    resolution: pitchbend resolution
    channelDistribution: tuple specifying which score chan is output to which actual chan, e.g. for distributing chan 0 over chans 0-7 do
       	unit(0: [0 1 2 3 4 5 6 7])



*** TODO test microtonal MIDI output

*** TODO 

    If note already has pitchbend fenv, then add offset to this pitchbend fenv such that 0 corresponds to its microtonal pitch

    Use Out.midi.noteToPitchbend to get offset value

    Approach: Change this in Fenv.itemFenvsToMidiCC (i.e. check when Controller==pitchbend and then optionally shift that fenv depending on some new arg to Fenv.itemFenvsToMidiCC), and then also change all defs using it (only defs in Fenv)


*** csvmidi seems to support MIDI ports, so I can have > 16 chans in total  

    *Anyway, for now I may simply support single port with 16 chans*

    --------------------

    Doc: http://www.fourmilab.ch/webtools/midicsv/    
    /Track, Time, MIDI_port, Number/
    This meta-event specifies that subsequent events in the Track should be sent to MIDI port (bus) Number, between 0 and 255. This meta-event usually appears at the start of a track with Time zero, but may appear within a track should the need arise to change the port while the track is being played. 

    -> I would likely need to refactor MIDI file output such that multiple tracks are output...



** Lilypond: output seq (of seq ...) of sims with multiple staffs 


* Strasheela examples


* Strasheela Bugs

** TODO BUG: getOffsetTimeInSeconds  no dependency to tempo curve or time shift function defined yet, depends on type of temporal container

** TODO BUG: tempo setting affects Csound and MIDI output differently

%% BUG: MIDI tempo not OK

declare
%% set playback tempo
{Init.setTempo 70.0}
%% Create test score
MyTestScore = {Score.makeScore
	       seq(items:[note(duration:2
			       pitch:60
			       amplitude:80)
			  note(duration:2
			       pitch:64
			       amplitude:60)
			  note(duration:2
			       pitch:67
			       amplitude:50)
			  note(duration:6
			       pitch:72
			       amplitude:100)
			 ]
		   startTime:0
		   timeUnit:beats(4))
	       unit}


%% Just in case: wait until 
{MyTestScore wait}


%% Csound output 
{Out.renderAndPlayCsound MyTestScore
 unit(file:myTestScore)}

%% MIDI output
{Out.midi.renderAndPlayMidiFile MyTestScore
 unit(file:myTestScore)}


** Repair adaptive JI

   see    [[file:~/oz/music/Strasheela/strasheela/trunk/strasheela/contributions/anders/HarmonisedScore/testing/Score-test.oz::GetAdaptiveJIPitch]]

# ?? did I somewhere replace root by transposition?
# see 22 ET example..

Some bug in computing the octave


** Fix bugs

   HS.rules.maxRepetitions

   HS.rules.expressEssentialChordPCs


* Strasheela design						    :STRASHEELA:

** Diss resolution
   [[file:Strasheela-Maybe-TODO.org::*Introduce%20some%20generalised%20concept%20of%20resolution%20of%20dissonances][file:Strasheela-Maybe-TODO.org::*Introduce some generalised concept of resolution of dissonances]]

** TODO Fenv.renderAndPlayMidi: add Fenv controlling articulation (note length)
   
   ?? Fenv value is note duration factor 
   E.g., 0.8 results in some non-legato, 1.1 is legato, 0.3 is staccato
   
   Or is addition better than multiplication
   I feel multiplication is more flexible, but sometimes I may want to add instead
   ?? can I somehow generise and allow for both options?


** TODO Create variant for Out.saveScore using pickles

   Some score objects (e.g., Fenvs which contain procs) cannot be translated into text (code), i.e. cannot be "archived". However, they could be picked! 

   On the other hand, pickling not supported for undetermined values. Can I have an approach which works for both cases (translates undetermined vars into text/code which would be compiled into Oz values during loading.)

   Alternative idea for storing Fenvs to textual format: store approximated Fenv (sample Fenv and create envelope from sampling data)


** Define how fenvs of prototype motifs can be variated with motif instance arguments 

   [this is actually a Strasheela TODO..]

   See [[file:MidiOut_toTassman/MusicRepresentationForTassmanPiece.org::*Prototype%20Motif%20Variation][file:MidiOut_toTassman/MusicRepresentationForTassmanPiece.org::*Prototype Motif Variation]]

*** TODO Extend ProtoMotif 'scriptArgs'

    see [[file:MidiOut_toTassman/MusicRepresentationForTassmanPiece.org::*Prototype%20Motif%20Variation][file:MidiOut_toTassman/MusicRepresentationForTassmanPiece.org::*Prototype Motif Variation]]

*** TODO Check my ideas out with simple motif prototype (e.g., with fenvs at different levels) and motif instance args 

     See [[file:MidiOut_toTassman/MusicRepresentationForTassmanPiece.org::*Prototype%20Motif%20Variation][file:MidiOut_toTassman/MusicRepresentationForTassmanPiece.org::*Prototype Motif Variation]]
   



     
* Other 

** GeOz 
   
*** TODO Install GeOz 
    
    NOTE: development of Gecode/J is discontinued. So, I better stick with Mozart/Oz. But then it would be a good idea to support gustavo getting Gecode running for Oz. E.g., moral support by installing it and asking questions, also finding bugs perhaps..

    First ask  gustavo.ggutierrez@gmail.com whether meanwhile graph constraints are working again

1) Download gecode sources (we don't have support for binary distributions yet) and build them. In the install directory there will be a lib/pkgconfig subdir. Export the shell variable PKG_CONFIG_PATH to /Users/u/install/lib/pkgconfig. For this you need pkg-config installed, if not, download it form http://www.rudix.org/packages.html .

2) With the previous variable exported, the mozart configure will properly detect gecode. Then, just configure mozart (with debug support if you want) and install it.

3) Now, you should have a working installation of the development branch and you can take a look at mozart-gecode/share/examples/gfd for the examples. That will give you and impression of the changes from the user level.

If problems occur ask gustavo.ggutierrez@gmail.com


*** Check out documentation

    The reference doc is updated to reflect the new constraint system
    Wait/ask gustavo.ggutierrez@gmail.com to render the HTML files

*** Check out examples

    How did coding style change? What else did change

    file:/Users/t/oz/mozart/branches/mozart-gecode/mozart/share/examples/gfd/

    possibly create new small-scale examples for testing and to better understand

**** FD constraints (including selection constraints)
**** FS constraints
**** !! Graph constraints
     
     currently broken in Gecode 2.*
     gustavo.ggutierrez@gmail.com said this should be fixed in about 1-2 months time (i.e. mid Oct-Nov)

**** Space combinators 


*** Check out how performance of examples 

    Noticable difference of old version?


** TODO Read Strasheela doc						  :EASY:

   know your system, e.g., know all my Patterns 



* Tasks for Le StruM						       :WAIT:

  [Wait for Eduardo to by Ableton Suite]

  see: file:~/texte/Plymouth/Project/


** Learn Ableton Suite (overview)

** Learn MIDI out capabilities or Waverider

** Develop strategies how to MIDI remote-control Ableton with Waverider

** Develop little demo session 
