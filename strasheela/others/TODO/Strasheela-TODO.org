
* Strasheela installation					    :STRASHEELA:

** TODO [#A] Create test program (executable) which tests a few core Strasheela functionalities and reports results at stdout to the user 		              :VIELLEICHT:

useful for package creators and new users to test whether installation was successful


** TODO [#C] ?? Define Oz GUI application for creating an OZRC file: pathes for applications and directories are then specified in a GUI                             :VIELLEICHT:


* Strasheela design						    :STRASHEELA:

** TODO [#A] Time curves etc

Goal: user can freely define tempo curve and time shift curve for any temporal container in score 

It should be relatively straitforward to access the performance time of any score time of a temporal item (e.g., note start and end times) depending on all temporal containers the item is contained in

See my notes on paper...


** TODO Oz Module.link / Module.apply: why did I need it	    :VIELLEICHT:

See ~/oz/music/Strasheela/private/test/OtherFunctors/ModuleLinkingTest

why did I ever need ModuleLink instead of Module.link?

Could it be that the problem appeared only when a buffer which loaded some module was re-fed? 
Isn't this a situation which is perfectly normal when you work with multiple non-functor files in the OPI? Shouldn't the default module manager in the OPI behave like the default module manager for functor compilation (which is only a single one, even if called in multiple files -- so no multiple copies of functors/modules are created)



** TODO OutGUI							    :VIELLEICHT:

** TODO [#A] 1W Refactor harmony model

*** Harmony model: Databases as arg for object creation

Presently there is only a global chord, scale etc database 

I should keep a global database as an option, because this is most suitable for most CSP. Additionally, it should be possible to give the databases to score objects (chords, scales, ..) as optional init argument -- the init arg defaults to the global database.

This refactoring requires that all database accessors expect a score object (chord, scale ..) or its database as argument. 
Possibly, I leave the old database accessors and setters as is (i.e. without additional object/database arg) for compatibility of the old examples. 
In that case, I need to define new additional accessors which expect the object/database arg, and the doc of both the new and the old accessors/setters must make these two options using databases very clear.


*** Harmony model: Interval as score object
  
Explicit interval score object. Creation uses memoization for two given pitches.

?? Should I introduce further additional score objects like pitch and degree ??

Test interval class with memoization

*** Harmony model: Clean up doc


** TODO [#A] Extend meter model

  - extend meter model for changing meter

  - test constraining metric structure with sim meter: for accessing potentially inaccessible context sim meter use delaying constraints: filter and test with a reified constraint together with an equality test

{ForAll {MyScore filter($ fun {$ X}
			     {IsMeasure X} andthen
			     {MyNote isSimultaneousItemR($ X)} == 1
			  end)}
 MyConstraint}


   - !!?? there was some idea of "Orjan which I wanted to incorporate to Strasheela and for which I needed this delayed constraints approach..? 
     Was it harmony rule depending on metric structure? For example, no non-chord tones on strong beat

   - Optional: lilypond output for metric structure


** Multi-core  processing

*** DONE Reread Oz distributed programming (van Roy)

Play around with the possibilities: create multiple sites (on localhost simply for now) and communicate between them 

*** DONE Test: multiple Oz sides are independent processes on the computer

That is: test whether multiple processes can run on different CPUs

*** DONE Simple CSP with parallel search

Check whether multiple CPUs are used  


*** DONE Simple Musical CSP with parallel search

How does communication of data structure slow down the process?


** TODO Update Lilypond output 

Lilypond export outputs only rather old version. Meanwhile, Lilypond handles nested scores (quasi sim/seq containers) better than old version, but behaviour of old version is pertained when using Lily's conversion script. So, I should update my Lily output to a more Lily syntax version


** TODO NonmensuralENP->MensuralENP as Lisp def			    :VIELLEICHT:

see Strasheela/private/WorkInProgress/NonmensuralENP->mensuralENP 


** TODO add a score transformation with allows to restructure a Strasheela score hierarchy in a highle generic wasy (e.g. for outputting the fixed hierarchies of ENP-notation, Lilypond, MIDI...)

   - it would be great if in a transformed and more flat representation the info on the previous hierarchic representation is still retained (e.g. added to item info: 'begin(<marker>)' and 'end(<marker>)'). When the more flat representation is then output (e.g. to lilypond, ENP-notation or MIDI), these markers could be used to somehow retain the old nesting in the output format (e.g. to draw analysis brackets in Lilypond or ENP, or as text events in MIDI out). When the output music is edited, it could later perhaps be loaded into Strasheela again and the old hierarchy could be restored??


** Refactoring 

*** TODO [#A] Concurrent method filter (filterThreaded) which does return stream instead of list: as soon as enough information is available on specific score object to fulfull given test function, add it to stream. Close stream as soon as it is known that no further elements will be added.

NOTE: this matter could make it into a publication (part of a publication)! 

Related approach: find using filter + reified constraints as boolean tests is related but note the same. 

However, even if boolean test would return true for some datum already, find blocks if reified constraint blocks on some element before. This new approach works even when I don't know in which order variables are determined and thus in which order elements are added to the stream. 

Similar issue with filter: even with reified constraints as boolean tests, filter may block completely until enough information is available in all data. An concurrent filter would return data in a stream as soon as enough information is available on these data.
 
Sufficient to have a filter which concurrently processes a list of objects. I only need to collect all data with collect (e.g., all data matching test function) and then do concurrent filter on this result list. 

A method filterThreaded would further improve the application of delayed constraints where filtering tests used reified constraints 
E.g., I could use a method filterThreaded for a better definition of getSimultaneousItems


*** TODO refactor output means: they are inconsistend, perhaps not general enough etc. :VIELLEICHT:

  - output of 'non-existing' timed items (e.g. notes of duration 0) -- skip

  - !!?? make MakeEvent2CsoundFn more general: Idea Spec is either some
     method (e.g. an accessor) or some unary function which gets
     object as arg.

  - refactor Lilypond output to use the (still to program) score transformation with allows to restructure a Strasheela score hierarchy

*** TODO Output to lilypond etc: make extension for outputting specific score information (more) reusable :VIELLEICHT:

E.g. for outputting information such as meter, key, motif boundaries... 


*** TODO !!?? Some means to define rules in a more modular/generic way -- currently, e.g., more complex counterpoint rules, can not be used in other CSP as they rely on the specific score representation (e.g. extensions to Note) :VIELLEICHT:

  -> Better solution: use memoization instead of extending the music representation ad hoc
  However, memoization can be computationally expensive

*** TODO toInitRecord: further cleanup				    :VIELLEICHT:


**** toInitRecord: what to do with init args which get procedures or classes (e.g. classes of harmony model)?

     %% I must exclude procedures and classes as init argument if I export into text files.
     %% Moreover, these will probably not work for pickling: can I pickle a proc which references an object??
     %%
     %% ?? when do I need procedures and classes as init argument: if I what to recreate a CSP (e.g. after hand-editing results). I probably don't need these args for score objects which are fully determined and are only archived..


**** Add correct cases to toInitRecord defs for classes such as HS.score.note etc which expect procedures as init args. I may filter out these args with excluded..

**** use output of toInitRecord together with init classes for saving of score instances into pickles
     
  ?? also output into text file with specified classes: I can introduce a "dictionary" which maps classes to their textual representation...
    
   -> this todo item is probably outdated already: cf. Out.saveScore

*** TODO Music representation consistency: so far, I used class attributes for object parameters etc. However, for the quick definition of subclasses with Score.makeClass I introduced stateless class features for additional parameters etc. This is neither consistent in the class usage (use of different accessors like {X getA} and Y.b) nor does it allow for later score editors.. :VIELLEICHT:

*** TODO ?? remove toPPrintRecord and replace it with highly generic toFullRecord? :VIELLEICHT:
    sorted mainly already?
    OLD: toPPrintRecord: output graph mode using IDs similar to input of MakeScore

*** TODO ?? add textual representation of parameters: currently, parameters are not supported my Score.makeScore :VIELLEICHT:

    should I add parameter support at all? Score.makeScore _does_ work on note-level. I would only need to create single params, e.g., for item init arg addParameters



** Efficiency


*** TODO [#A] Refactor Strasheela distribution: recomputable support for random distribution

See also ./Refactor-ScoreDistribution.oz

*** TODO [#A] check out performance with adaptive recomputation

  Adaptive recomputation is highly recommended by Schulte, so I should possibly do this before investigating other approaches to improve efficiency
     
  -> for this I most of all need a nicely working 'select random value' distribution which can be recomputed


*** TODO [#A] Does score outside script/space save memory. If so, define abstractions/templates for having the score outside the script

See ../../testing/zy_Efficiency/KeepMusicRepresentationOutsideComputationalSpace.oz 

**** Measure how the different approaches differ in the amout of memory (and time) comsumed by copying.

 Approaches:

  - !! Measure total amount of memory and time required by search (e.g. put each script in an application of its own, call plain solver and measure time and memory with UNIX tools such as time and ...)
    -> which UNIX tool measures memory consumption of a call?

  - !!?? Measure with Oz profiler:
    problem: the memory/time comsumption of copying seems not to show if I just compile CSP with profiling information.
    Alternative option: temporarily, compile whole Mozart with profiling and check memory consumption of space copying proc (results will be very hard to read in this case!) 


****  _if_ I found out that memory reduction can be significantly reduced by defining the music representation outside the script/space, then I have to develop abstractions/templates for the following cases (it will be more complex than having the score inside the script, but it shouldn't be too hard..).


  - distribution strategies
  - implicit constraints
  - expressive rule applications 


**** split Strasheela in two parts: the part to define CSPs and the part to solve them. The solver part uses a very [speichersparende] representation based on records instead of classes and objects (i.e. I need to define/port the data abstraction interface required for distribution strategies). 

     -> I did some profiling to better understand this issue (see Strasheela/texting/profiling.oz)
     
       - Memory requirement of Strasheela mainly caused by elaborated data structure: there is so much explicitly represented. A more efficient data representation for the search would dump all information not required by the CSP: this is a very difficult task!!

         -> BTW: the memory difference between a record-based and an OOP based data structure appears to be neclegtable


***** The Solver 'the server'
     
      - The solver expects a CSP spec which specifies the music representation (with a unique ID for each variable) and a list of constraints which specify which variables are constrained by which constraint (aux variables also supported by the constraint spec).
      Also distribution strategy defined by spec.

      - This solver then creates the search script from the CSP spec 
     
      - This solver is much more efficient than current Strasheela: much less copying because much smaller data structure

      - The solver would be even more efficient if it could apply batch recomputation: wait for Geoz..
  
***** The second part of Strasheela (the 'client') defines the CSP specs: the present Strasheela could be modified to do this. It is even possible, that the present Strasheela could be modified such that it either does the search directly itself or alternatively creates this CSP spec (this option could be useful for prototyping and also helps to keep the present application a running program ..).

     - The CSP def part of Strasheela could/would mirror _every_ propagator defined by Oz. All constraints in a Strasheela program would be replaced my its Strasheela substitute. With a global switch (init variable/cell?) the user could decide whether the Strasheela constraint substitutes either just apply the orig Oz constraint or otherwise 'record' this constraint call for the CSP spec by denoting the name of the constraint and the unique IDs of all its argument vars 

       !! -> How to access the ID when the constraint gets the variable directly?? I would need to rewrite all Strasheela programs such that every Strasheela constraint substitute always expects parameter objects instead of variables!

***** Instead with this Strasheela 'client', other CAC applications could also create CSP specs and call the Strasheela 'server' (e.g. PWGL)


* Strasheela examples						    :STRASHEELA:

** TODO [#A] 'Intelligent arpeggio' example

  an example for Olle Romo
  see description in strasheeela support tracker
  
  https://sourceforge.net/tracker/index.php?func=detail&aid=1883452&group_id=167225&atid=842099

  ?? Duration: 1d -- probably more :)
  

** TODO Groove templates					    :VIELLEICHT:

  an example for Olle Romo
  see description in strasheeela support tracker
https://sourceforge.net/tracker/index.php?func=detail&aid=1883454&group_id=167225&atid=842099


** TODO Inventio example					    :VIELLEICHT:

*** harmonic etc analysis of inventio 1

*** Inventio B: Fuege "BrainImage Data" in CSP ein

?? As parameter or info for motif?

Abstract applied constraint, so the effect is controllable

* Strasheela documentation					    :STRASHEELA:

** Strasheela tutorial

*** DONE Strasheela tutorial: finish music representation 'chapter'
*** TODO [#A] Strasheela tutorial: do music constraint programming 'chapter'

*** TODO Email Tobias Kunze: CM CSS verwendet...


* Collecting new ideas

** TODO Lesen XMG



* General Oz todo							    :OZ:

** Oz Path								:URGENT:
   SCHEDULED: <2008-02-11 Mon>

*** TODO Oz Path: bug commits

*** TODO Oz Path: doc update

*** TODO Oz Path: test cases


** ozh								    :VIELLEICHT:

*** ozh: add SGML doc

the orig documentation source files for creating, e.g., the HTML doc are still missing in our branch

I meanwhile checked -- it appears this file is not available any more online


*** TODO ?? ozh: add TODO list to wiki

  - better file names for resulting HTML files, and better anchor names (make them persistent): see below
  - better/more flexible layout of doc strings (see below) 
  
*** TODO ozh: update save file and anchor names 

File names and anchor names should be generated from source entries (e.g., file names, class names) instead of generic names like node1.html or class1.html where links from elsewhere into the documentation get if files etc. are added to the source later

*** TODO ozh: Formatting of documentation strings 

The current implementation does not even preserve whitespace after a new line in doc strings. Consequently, the layout of code examples is destroyed.

Even better would be, if some wiki layout is supported (optionally). Does there exist some easy wiki-layout -> HTML application (expecting wikified text snippets and returning corresponding HTML code snippets).   


** Collozeum

*** TODO Collozeum: make projects available at Mogul

*** TODO ozcurl/ozjs TODO: add ozmake makefile			    :VIELLEICHT:

