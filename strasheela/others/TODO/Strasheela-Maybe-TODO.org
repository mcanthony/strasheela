#+CATEGORY: Strasheela

* Strasheela examples					      :MAYBE:STRASHEELA:
  

** Groove templates					    :MAYBE:

  an example for Olle Romo
  see description in strasheeela support tracker
https://sourceforge.net/tracker/index.php?func=detail&aid=1883454&group_id=167225&atid=842099


** Realtime example with Ppmpd

   For first idea see GTD folder "Realtime Strasheela Example"


** Muzak Beispiel mit Kilian						 :MAYBE:

   see 
   [[file:/Users/t/texte/CollaborationWithKilian/Muzaks/]]
   
*** TODO Recapitulate definition: how is resulting value seq organised
*** Port Lisp to Oz
*** Redefine as constraint 


** Josquin counterpoint example						 :MAYBE:
  
   [Problem: this example can be highly complex to define -- is it worth the effort? Better spend that time on something you will reuse for a composition]

   I may publish it in a music theory Journal 
   Main message: we would like to better understand how Renaissance music [Josquin counterpoint] works and we do so by formalising and implementing a music theory for florid counterpoint. The rules are inspired by counterpoint textbooks and also [originally] developed  
   Discussion then: where did we succeed and where did we fail in modelling Josquin counterpoint
 
   [[file:~/oz/music/Strasheela/strasheela/trunk/strasheela/examples/FloridCounterpoint-Canon-revised.oz]]

   more full rule set at 
   [[file:~/oz/music/Strasheela/private/examples/Josquin/PlanningAndThinking/JosquinCounterpoint-MusikTheorie.txt]]

   also, GTD folder "Josquin cp"

*** [80%] Constrain rhythm of single voice       
**** TODO Fix TreatNoteOverlappingBarline (too strict or buggy..)	
**** TODO Clearly mark which rules give advantage to left-to-right var ordering	

     Rhythmic motif rules..
     
**** TODO Improve rhythmic motifs (was only tmp motif set)	
*** Constrain pitch structure of single voice
**** TODO Make scale root constrainable (enter in DB Dorian, Phrygian...)	
**** TODO Better treat accidentals 
     Find rules which result in accidentals only in cadences, allow for accidentals only into scale root, and disallow [querstand] 
     
     ?? Disallow accidentals at beginning (of phrase or piece)
     ?? use root of scale (see above)

**** Hide tritonus 

     No tritonus
     - between Richtungswechsel
     - between two neighbouring notes (OK)
     - between two notes with only a single note in between

**** ?? restrict first pitch of voice to to scale root or fifth??
**** ?? Define abstraction for pitch domain per voice 

*** Combine rhythm and pitch structure for single voice
**** TODO Define rule(s) for quarter notes: only stepwise into one direction	

*** Combine multiple voices 

**** Consonances between sim notes + Dissonance treatment

     Decide: counterpoint for two or more voices (I would like to do more...)

     [[file:~/oz/music/Strasheela/private/examples/Josquin/PlanningAndThinking/JosquinCounterpoint-MusikTheorie.txt::Dissonanzbehandlung%20Zusammenklang][file:~/oz/music/Strasheela/private/examples/Josquin/PlanningAndThinking/JosquinCounterpoint-MusikTheorie.txt::Dissonanzbehandlung Zusammenklang]]

***** Passing tone (Durchgang)
***** Suspension (Vorhalt)
***** Auxiliary note (Wechselnote)

**** Start and end in perfect consonance (Josquin sometimes does triad in root position, mostly minor)

**** DONE Parallels treatment: 	
      CLOSED: [2008-05-14 Wed 17:25]

      rule disabeling open parallels exist already

*** Cadence

**** Info: Music theory

     NOTE: cadences at the end are typical, but not necessary -- there exist closes without! 
     So, don't overestimate the importance of this matter...

***** Idea of general cadence rule 

      Tries to generalise the cases in de la Motte p. 111

      [Note: just an idea, possibly too general]
      
      - There does exist some dissonance between I and II mode degree (usual seventh, sometimes ninth) when the last whole  before the end starts [excludes case 3 where diss is more early]
      - The leading tone of the mode is played somewhen during last whole  before the end (and no chromatic variant of its mode degree)
      - last interval between both voices is octave
      - Only stepwise progression after last whole  before the end [excludes case 6 [Unterterzclausel]]

***** Possibly simplest approach: Restrict to [Diskantklausel]

      cf. de la Motte p. 111
      
****** Rhythm between two voices

       ... whole halve | longNote
       ... whole | longNote
      
****** Pitches:

       Intervals between the note durations above

       min 2nd v min 2nd ^
	      maj 2nd v

****** Dissonances:

       Dissonance when whole of second voice starts


*** Optional: canon or imitation

*** Search considerations

    Constrained inaccessible context: simultaneous notes 
    Distribution strategies to test: first fail, left-to-right, other? 
    
*** OLD 

**** Revise example

     Presentation may suggest that we only need flexible/extendible left-to-right variable ordering, find convincing example (with performance figures) which demonstrates usefulness of really "programmable" variable ordering (e.g., example with highly complex rhythmical structure, where the rhythmical structure is the searched for first)  

***** TODO Revise rule set

      check existing rule set
      http://strasheela.sourceforge.net/strasheela/doc/Example-FloridCounterpoint.html

      compare with more true rule set at 
      [[file:~/oz/music/Strasheela/private/examples/Josquin/PlanningAndThinking/JosquinCounterpoint-MusikTheorie.txt]]

      Work out how you can improve the existing rule set (and musical results) without causing too much work 

       BTW: Fuxian counterpoint example takes only msecs, so this example make be more complex

	- ?? Introduce music representation for scale degree, so you can allow for accidentals and resolve them correctly
	- ?? cadence rules? (de la Motte, S. 111)

      Idea: you could use 31 ET for this example (Renaisances meantone): simple way to get enharmonic notation

****** Ideas: Improve melodic rules

       Revise the following rules

       - Each note has a diatonic pitch in the C major scale.
	 TODO: Generalise with constraint HS.rules.noteInPCCollection 

       - The first and last note of Voice1 must start and end with the scale root.
	 Revised rule: all voices finish in [chord] with root of modus: either open octave, open fifth, or triad (minor more likely than major) 

       - The melodic interval between neighbouring pitches in a voice is limited to a minor third at maximum (i.e. less than in the Fuxian example).
	 TODO: bellistic curve rule

       - The maximum and minimum pitch in a phrase (its melodic peak and 'valley') occurs exactly once and it is not the first or last note of the phrase. In this example, a phrase is defined simply as half a melody.
	 ?? 

       - The pitch maxima and minima of phrases must differ.
	 ?? generalise? 




*** ?? Alternative idea: Reduce florid counterpoint to mini example 

    Simple rhythmic rule(s)
    !! Melodic rules: resolve skips
    No parallels
    Canon
    ?? max min/max pitch only once



** Inventio								 :MAYBE:

   See [[file:/Users/t/oz/music/Strasheela/private/examples/Inventio/]]

*** harmonic etc analysis of inventio 1

*** Inventio B: Fuege "BrainImage Data" in CSP ein

?? As parameter or info for motif?

Abstract applied constraint, so the effect is controllable



* Strasheela design					      :MAYBE:STRASHEELA:


** [90%] Harmonic constraint ProgressionStrength 			 :MAYBE:

*** Superstrong progressions reconsidered

    [wait until cadencial set constraint/proc is defined]

    Alternative definition: superstrong progressions are cadencial (the union of their pitch classes contains all pitches which define a key)
    -> According to this def, progressions like V->VI or even V->VIb (which certainly are superstong according to Schoenberg) are not superstrong anymore but don't fall into any category.
    I may consider creating an additional definition based on the notion of cadencial sets. 


**** Info
     
     file:///Users/t/Desktop/mamufaq.html#Q_superstrong
     What is special in the chord progression IV-V?
     
     From: Inotmark <inotmark@aol.comnospam>.
     It is strong for a number of reasons:
     1) it has no tones in common
     2) it has a tritone between root of IV and third of V
     3) it is sufficient to define a key without the tonic chord appearing.
       	Schönberg calling it superstrong may be due to 3 above.
       	
       	Connection to MaMuTh:
       	Property (3) means, in Mazzola's terminology, that the chord set {IV, V} is cadencial.

*** TODO Implement Schoenbergs orig defs				 :MAYBE:

    Based on root PC intervals 

*** DONE Move definitions from Strasheela/tmp.oz into HS.rules 
    CLOSED: [2008-04-08 Tue 17:09]

    As subfunctor?

*** DONE Implement constraint for strong, weak and superstrong
    CLOSED: [2008-03-17 Mon 14:03]

    As reified constraints?

*** DONE Combine these constraints to single rating
    CLOSED: [2008-03-17 Mon 14:03]

    With reified constraints?

*** DONE Combine this single rating with secondary rating based on number of common pitch classes 
    CLOSED: [2008-03-17 Mon 14:04]

    
*** DONE Write test suite for testing all constraints 
    CLOSED: [2008-04-08 Tue 17:37]

    Missing is only ResolveDescendingProgressions

    [[file:~/oz/music/Strasheela/strasheela/trunk/strasheela/contributions/anders/HarmonisedScore/testing/Rules-test.oz::TODO%20ResolveDescendingProgressions][file:~/oz/music/Strasheela/strasheela/trunk/strasheela/contributions/anders/HarmonisedScore/testing/Rules-test.oz::TODO ResolveDescendingProgressions]]

*** DONE Create example(s)
    CLOSED: [2008-04-08 Tue 17:09]
*** DONE Create Documentation 						  
    CLOSED: [2008-04-08 Tue 17:10]





** Refactor ChordsToScore

   implement additional constraints for homophonic chord progression such as "harmonisches band bleibt liegen"

   see 
   [[file:~/oz/music/Strasheela/tmp.oz::fun%20ChordsToScore_Script%20ChordSpecs%20Args][file:~/oz/music/Strasheela/tmp.oz::fun ChordsToScore_Script ChordSpecs Args]]


*** TODO Decide how additional constraints are represented/stored 

    Approaches 
    - as present: constraints are already part of def and controlled by arguments
    - have instead arg 'constraints' for constraining top-level score object: all present and further constraints are handed over by this arg. Predefined constraints are stored, e.g., in HS.rules
    - have a combination of constraints given to 'constraints' args and 'buildin' constraints controlled by additional args

*** TODO According to this decision, implement the additional constraints    




** Oz Module.link / Module.apply: why did I need it 			 :MAYBE:

See ~/oz/music/Strasheela/private/test/OtherFunctors/ModuleLinkingTest

why did I ever need ModuleLink instead of Module.link?

Could it be that the problem appeared only when a buffer which loaded some module was re-fed? 
Isn't this a situation which is perfectly normal when you work with multiple non-functor files in the OPI? Shouldn't the default module manager in the OPI behave like the default module manager for functor compilation (which is only a single one, even if called in multiple files -- so no multiple copies of functors/modules are created)

** OutGUI 								 :MAYBE:

** NonmensuralENP->MensuralENP as Lisp def 				 :MAYBE:

see Strasheela/private/WorkInProgress/NonmensuralENP->mensuralENP 



** Graphical interface 

*** Score Interface for interactive music constraint programming
    
    See future work section of my applications etc for details

    ?? Use PWGL score editor, ENP notation?


*** ?? Algocomp GUI like AlgoScore

    AlgoScore
    http://www.bitminds.net/kymatica/index.php/Software/AlgoScore


    I could create input for determined values with such a GUI, e.g., enter args (numbers and controller data) for sub-CSPs, e.g., created by my prototype motif model. 
    Possibly easy approach: just output Csound score from AlgoScore, and then parse that Csound score with Strasheela to get the data. Alternatively, the supported Nasal scripting language seems to have a UNIX pipe interface, so I could use my OzServer in the background

    Anyway, just an idea, not sure how much I really like such an interface and how much it really is an improvement over plain text. 



** Extend meter model [[file:~/oz/music/Strasheela/strasheela/trunk/strasheela/contributions/anders/Measure/Measure.oz][Measure.oz]]

   Do this if you actually need it..

*** Extend meter model for changing meter

*** Create example which constrains metric structure 

    Music representation: metric structure runs in parallel to other score objects (like harmonic structure)
    For accessing potentially inaccessible context sim meter use delayed constraint application: filter and test with a reified constraint together with an equality test, e.g.

{ForAll {MyScore filter($ fun {$ X}
			     {IsMeasure X} andthen
			     {MyNote isSimultaneousItemR($ X)} == 1
			  end)}
 MyConstraint}


**** Check "Orjan's library PWMC for ideas: constraint application depending on rhythmical structure

     E.g., 

    - !!?? there was some idea of "Orjan which I wanted to incorporate to Strasheela and for which I needed this delayed constraints approach..? 
      Was it harmony rule depending on metric structure? For example, no non-chord tones on strong beat

    
*** Lilypond output for metric structure				 :MAYBE:



** refactor output means: they are inconsistend, perhaps not general enough etc. :MAYBE:

 - output of 'non-existing' timed items (e.g. notes of duration 0) -- skip

 - !!?? make MakeEvent2CsoundFn more general: Idea Spec is either some
    method (e.g. an accessor) or some unary function which gets
    object as arg.

 - refactor Lilypond output to use the (still to program) score transformation with allows to restructure a Strasheela score hierarchy


** Add a score transformation with allows to restructure a Strasheela score hierarchy in a highle generic way (e.g. for outputting the fixed hierarchies of ENP-notation, Lilypond, MIDI...)

   see [[file:/Users/t/oz/music/Strasheela/private/WorkInProgress/ScoreTransformation/]]



*** Extension: retain hierachic nesting info 

    It would be great if in a transformed and more flat representation the info on the previous hierarchic representation is still retained (e.g. added to item info: 'begin(<marker>)' and 'end(<marker>)'). When the more flat representation is then output (e.g. to lilypond, ENP-notation or MIDI), these markers could be used to somehow retain the old nesting in the output format (e.g. to draw analysis brackets in Lilypond or ENP, or as text events in MIDI out). When the output music is edited, it could later perhaps be loaded into Strasheela again and the old hierarchy could be restored??


** Refactoring 

*** Refactor harmony model

**** Harmony model: Databases as arg for object creation		 :MAYBE:

     Presently there is only a global chord, scale etc database 
     
     I should keep a global database as an option, because this is most suitable for most CSP. Additionally, it should be possible to give the databases to score objects (chords, scales, ..) as optional init argument -- the init arg defaults to the global database.
     
     This refactoring requires that all database accessors expect a score object (chord, scale ..) or its database as argument. 
     Possibly, I leave the old database accessors and setters as is (i.e. without additional object/database arg) for compatibility of the old examples. 
     In that case, I need to define new additional accessors which expect the object/database arg, and the doc of both the new and the old accessors/setters must make these two options using databases very clear.


**** Harmony model: Clean up doc					 :MAYBE:

**** Output to lilypond etc: make extension for outputting specific score information (more) reusable :MAYBE:

     E.g. for outputting information such as meter, key, motif boundaries... 


**** !!?? Some means to define rules in a more modular/generic way -- currently, e.g., more complex counterpoint rules, cannot be used in other CSP as they rely on the specific score representation (e.g. extensions to Note)  :MAYBE:

   -> Better solution: use memoization instead of extending the music representation ad hoc
   However, memoization can be computationally expensive

**** toInitRecord: further cleanup					 :MAYBE:

***** toInitRecord: what to do with init args which get procedures or classes (e.g. classes of harmony model)?

      %% I must exclude procedures and classes as init argument if I export into text files.
      %% Moreover, these will probably not work for pickling: can I pickle a proc which references an object??
      %%
      %% ?? when do I need procedures and classes as init argument: if I what to recreate a CSP (e.g. after hand-editing results). I probably don't need these args for score objects which are fully determined and are only archived..


***** Add correct cases to toInitRecord defs for classes such as HS.score.note etc which expect procedures as init args. I may filter out these args with excluded..

***** use output of toInitRecord together with init classes for saving of score instances into pickles
      
   ?? also output into text file with specified classes: I can introduce a "dictionary" which maps classes to their textual representation...
     
    -> this todo item is probably outdated already: cf. Out.saveScore

**** Music representation consistency: so far, I used class attributes for object parameters etc. However, for the quick definition of subclasses with Score.makeClass I introduced stateless class features for additional parameters etc. This is neither consistent in the class usage (use of different accessors like {X getA} and Y.b) nor does it allow for later score editors.. :MAYBE:

**** ?? remove toPPrintRecord and replace it with highly generic toFullRecord? :MAYBE:
     sorted mainly already?
     OLD: toPPrintRecord: output graph mode using IDs similar to input of MakeScore

**** ?? add textual representation of parameters: currently, parameters are not supported my Score.makeScore :MAYBE:

     should I add parameter support at all? Score.makeScore _does_ work on note-level. I would only need to create single params, e.g., for item init arg addParameters


* Strasheela installation						 :MAYBE:

** [#A] Create test program (executable) which tests a few core Strasheela functionalities and reports results at stdout to the user :MAYBE:

useful for package creators and new users to test whether installation was successful


** [#C] ?? Define Oz GUI application for creating an OZRC file: pathes for applications and directories are then specified in a GUI :MAYBE:


* General Oz todo						      :MAYBE:OZ:


** ozh								    :MAYBE:

*** ozh: add SGML doc

the orig documentation source files for creating, e.g., the HTML doc are still missing in our branch

I meanwhile checked -- it appears this file is not available any more online


*** ?? ozh: add TODO list to wiki

  - better file names for resulting HTML files, and better anchor names (make them persistent): see below
  - better/more flexible layout of doc strings (see below) 
  
*** ozh: update save file and anchor names 

File names and anchor names should be generated from source entries (e.g., file names, class names) instead of generic names like node1.html or class1.html where links from elsewhere into the documentation get if files etc. are added to the source later

*** ozh: Formatting of documentation strings 

The current implementation does not even preserve whitespace after a new line in doc strings. Consequently, the layout of code examples is destroyed.

Even better would be, if some wiki layout is supported (optionally). Does there exist some easy wiki-layout -> HTML application (expecting wikified text snippets and returning corresponding HTML code snippets).   






