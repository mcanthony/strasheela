<?xml version="1.0" encoding="UTF-8"?>

<chapter title="Constraint Programming">

<section title="-- Constraint Programming">
<subsection title="Introduction">
<info>The following sections introduce the basics of constraint programming in Oz.
</info>
<oz></oz>
</subsection>
</section>

<section title="Defining CSPs">
<subsection title="Introduction">
<info>A Contraint Satisfaction Problem (CSP) is defined as a tuple consisting of

  - A finite set of variables,
  - Each of which has a finite domain,
  - A finite set of constraints which limit the values which the variables may simultaneously take.
</info>
<oz></oz>
</subsection>

<subsection title="Variables domains">
<info>The two variables X and Y are declared to integers with a specific domain of allowed values (finite domain, FD).  X is explicitly declared to an integer in {0, ..., 10}. Y is declared to any integer supported by Oz (so you see the maximum domain supported by Oz).

Please note that a finite domain consists always of integers in Oz (for efficiency reasons), and that FD integers can not be negative. There are also other domains supported (e.g. sets of finite integers, and real numbers). 
</info>
<oz>local 
  X = {FD.int 0#10}
  Y = {FD.decl}
in
  {Browse [X Y]}
end</oz>
</subsection>

<subsection title="Constraint Propagation">
<info>This section declares two finite domain integers as the section before. In addition, it states that X is greater than Y. The domain of both variables are automatically reduced, so that all domain values fulfill the greater-than constraint. 

However, no specific solution is shown. The next section shows how to search for solutions of a constraint satisfaction problem (CSP) in Oz.
</info>
<oz>local 
  X = {FD.int 0#10}
  Y = {FD.decl}
in
  X &gt;: Y
  {Browse [X Y]}
end</oz>
</subsection>
</section>

<section title="Solving CSPs">
<subsection title="Introduction">
<info>This section introduces constraint solvers.
</info>
<oz></oz>
</subsection>

<subsection title="A Simple Script">
<info>This section shows the first full constraint satisfaction problem (CSP) definition.  A constraint solver (here SearchAll) expects a CSP in form of a script.  A script is a procedure (FindSols) whose only argument is the solution of the solved CSP.  The variable is often called the "root variable" of the script.  Transformed into common mathematical notation, the CSP states the following conjunction

  X + Y = Z  AND  X &lt; Y

The script simply collects the three variables X, Y, and Z in a record stored in the root variable Solution.  The solver SearchAll returns a list with all solutions of the CSP defined by the script.  Note the use of the special constraint operators `&lt;:' and `=:' instead of `&lt;' and `='.
</info>
<oz>local
  proc {FindSols Solution}
     X = {FD.int 1#10}
     Y = {FD.int 1#10}
     Z = {FD.int 1#10}
  in
     Solution = unit(x:X y:Y z:Z)
     X + Y =: Z
     X &lt;: Y
     %% search strategy
     {FD.distribute naive Solution}
  end
in
  {Browse {SearchAll FindSols}}
end</oz>
</subsection>

<subsection title="Oz Explorer">
<info>This example uses another constraint solver, the Oz Explorer.  The Explorer visualises the search space.  Green nodes in the tree denote solutions, red nodes represent a fail, blue nodes show a stage in the search where there are still open decisions.  Triangles represent a subtree (use the middle mouse button to show the nodes of the subtree).

Just double-click on a node to see the values of the variables at this stage during the search process (you can not look at failed nodes, though).  You can use this facility to get some intuitive understanding of the search process.  For example, look first at the variable values in the root node, than in a child node of the root and in a grand-child node and so forth, to monitor how the search process shrinks the variable domains.

You may play around with the menu entries of the Oz Explorer.  For example, select the top node with the mouse, then go to the 'Search' menu and select 'Next Solution'.
</info>
<oz>local
  proc {FindSols Solution}
     X = {FD.int 1#10}
     Y = {FD.int 1#10}
     Z = {FD.int 1#10}
  in
     Solution = unit(x:X y:Y z:Z)
     X + Y =: Z
     X &lt;: Y
     %% search strategy
     {FD.distribute naive Solution}
  end
in
  {ExploreOne FindSols}
end</oz>
</subsection>

<subsection title="Distribution Strategy">
<info>The last line of the script shows a very characteristic Oz feature: an Oz script explicitly defines a search strategy (or, more specifically the distribution strategy).  The procedure FD.distribute expects a specification of a distribution strategy and a record or list of the constrained variables.

The distribution strategy specifies in which order variables are visited during the search process.  The specification 'ff' stands for first-fail and means that always a variable with smallest domain is visited next.  The selection of a suitable distribution strategy is vital for the performance of the search process. Nevertheless, for keeping things simple this tutorial does not discuss constraint distribution in detail.

TODO: find an example where changing the distribution strategy actually does something!
</info>
<oz>local
  proc {FindSols Solution}
     X = {FD.int 1#10}
     Y = {FD.int 1#10}
     Z = {FD.int 1#10}
  in
     Solution = unit(x:X y:Y z:Z)
     X + Y =: Z
     X &lt;: Y
     %% search strategy
     %{FD.distribute naive Solution}
     %{FD.distribute ff Solution}
     {FD.distribute split Solution}
  end
in
  {Browse {SearchAll FindSols}}
end</oz>
</subsection>

<subsection title="Parameterised Script">
<info>This section defines a script which expects an argument -- a parameterised script.  IncreasingInts expects an integer L and returns the actual script (an anonymous procedure).  This script creates a list of L finite domain integers (using FD.list).  It then constrains all integers in this list to be pairwise distinct (using the constraint FD.distinct).  In addition, it constrains the sum of all integers to be equal the square of L (using FD.sum).

You may also edit the CSP definition.  For example, change the value for L in the IncreasingInts call to another integer.
</info>
<oz>local
   fun {IncreasingInts L}
      proc {$ Sol}
	 %% create a list of L FD integers with domain {0, ..., L*2}
	 Sol = {FD.list L 0#L*2}
         {FD.distinct Sol}
         {FD.sum Sol '=:' L*L}
	 %% search strategy
	 {FD.distribute ff Sol}
      end
   end
in
   {ExploreOne {IncreasingInts 7}}
end</oz>
</subsection>


<subsection title="BACKGROUND">
<info>Terms: TODO.

For more information, please see the "Finite Domain Constraint Programming Tutotiral at
  http://www.mozart-oz.org/documentation/fdt/index.html
</info>
<oz></oz>
</subsection>
</section>

</chapter> 

