#+TITLE: Integration of Strasheela into PWGL or OpenMusic


* Approach idea
  
OpenMusic/PWGL establishes connection to some OzServer instance (see file:~/oz/music/Strasheela/strasheela/trunk/strasheela/contributions/anders/OzServer/) or starts such a server. Ideally, this server uses the Oz compiler that runs also by the OPI, so that Oz code can always conveniently sent from Emacs, but this is not necessary.


Some OpenMusic/PWGL object executes Strasheela score scripts and receives the results. This object sends in the background code to the server started before.
Arguments
  - Optional: Some Oz/Strasheela definition, given either as string or path to an *.oz source file.
    This code is intended to define the score script that is called.
    This code will be fed initially. Feeding it always before makes sure that any change to the code is immediately reflected the next time this object is evaluated.
  - Name of script
  - List with args of script 
    How can I suitably input a complex nested list/record of arguments in PWGL or OpenMusic
    - Tmp solution: simply a keywords list, but find some GUI-based solution later


Output
  - Score in ENP format


 that receives as input 

  - 


** !! Oz <-> Lisp Interface 

   see file:~/oz/music/Strasheela/strasheela/strasheela/contributions/anders/OzServer/clients/oz-server-lisp-client
   and file:~/PWGL-User/0-TorstensOtherStuff/StrasheelaInterface/ENP2Strasheela.lisp
   and [[file:~/oz/music/Strasheela/strasheela/strasheela/goodies/Lisp/Lisp2Oz.lisp]]
   and the older file:~/lisp/own-projects/lisp-to-oz

   Use ompw: file:~/lisp/foreign-projects/ompw
   
*** DONE Socket communication
    CLOSED: [2012-06-14 Thu 20:21]

    LispWorks has build-in socket support, perhaps I use that (as both PWGL and OpenMusic are built on top of LW)
    http://www.lispworks.com/documentation/lw61/RNIG/html/readme-393.htm

*** DONE Oz data -> Lisp data
    CLOSED: [2012-06-14 Thu 20:21]

*** Lisp data -> Oz data

    partially done, see [[file:~/OpenMusic/TorstensLibraries/oz-server-interface/sources/lisp-to-oz.lisp::%3B%3B%20this%20is%20work%20in%20progress...][file:~/OpenMusic/TorstensLibraries/oz-server-interface/sources/lisp-to-oz.lisp::;; this is work in progress...]]

*** Lisp data -> Oz program

    In addition to data (see above) only add procedure application

    e.g., (oz-call <OzProcName> &rest args)


** !! OpenMusic score objects -> Strasheela score 

   OpenMusic
   http://repmus.ircam.fr/openmusic/

   Containers and simple containers
   http://repmus.ircam.fr/openmusic/dev-resources/containers

   OpenMusic music representation of basic objects strikingly similar to Strasheela's, but their higher-level objects go beyond that 

   Help for exploring objects 
   http://support.ircam.fr/forum-ol-doc/om/om6-manual/co/LowLevel.html



** !! Interface ENP score object -> Strasheela score 

   I could use that right away, even without realising the Integration of Strasheela into PWGL or OpenMusic
   E.g., for defining motifs.. 

   Goal: easily post Strasheela score code into Lisp listening by evaluating ENP score
   - Define Lisp->Oz syntax translation of simple data structures within Lisp
   - Define ENP -> Strasheela score translation within Lisp




** OpenMusic / PWGL modules for Strasheela subscripts

   - Automatically generate OMPW box definition for a given Strasheela subscript, but asking the subscript for its arguments and their defaults

*** Howto combine multiple Strasheela subscripts in OpenMusic / PWGL 

    Why? E.g., have separate subscripts for underlying harmony and actual score

    Have extra box: ToOzCode and/or EvalOzCode

    Individual subscript definitions generate Oz code (or its Lisp equivalent), but do not yet call the Oz server (and thus no solver). I can then simply combine such parts of an Oz program into an actual oz program 


* PWGL benefits and disadvantages

** Advantages

   - ENP
   - Meta score

   - Cleaner user interface

*** Less important

   - Supports ASDF


** Disadvantages

   - Lisp editor always linked to a patch (e.g., no Lisp file editing) and with less features (no find-definition)
     However, this is usable
     

* OpenMusic benefits and disadvantages

** Advantages

   - Suitable Lisp editor for my purposes
     - Lisp source code files can be edited
     - Convenient editing features (e.g., even for finding code)

   - Is open source

#   - Maquette (forthcoming PWGL Meta Score is better :)


*** Less important

   - Nice Lisp function boxes (e.g., create inputs for function arguments automatically)


** Disadvantages

   - Limited score editors, compared with ENP

*** Less important
    
   - No ASDF supports (but that should be reasonably easy to add..)

   - I find the workspace overkill












* !!! Segmenting Oz code cleanly in an PWGL patch

  Idea: I would like to break down my definition of Oz programs in a PWGL patch into multiple PWGL boxes for flexibility. For example, the rules for a constraint problem should be available separately, and also the constraint applicators should be available separately, so that they can be combined freely at will.

  Problem: these boxes generate Oz snippets that cannot be executed individually, and I do not want the PWGL user to get confused by these strings.

  Idea for a solution: these boxes return some Lisp data structure (object?) that wraps up the generated Oz code string. This wrapping Lisp data structure expresses the resulting Oz data structure (e.g., a proc, list, ...  -- also more specific cases: Strasheela constraint (with arity and what objects can be passed as input), Strasheela constraint applicator, ...). I can then introduce convenient features such as type checking, where other boxes of this PWGl-Oz interface only accept certain types as input (type checking). Ideally, these connections could not even be made in the PWGL interface, and instead a warning is immediately shown.
  More easy solution: if some unsuitable connection is made then through an exception, where the error message clearly says which box gets at which argument a wrong input.

  Some oz-inspect box could return the oz code string (for those who want to see that, e.g., for debugging or in order to better understand what they are doing).


* Goal: hide Oz server interface from users

  - If some Oz code is run for the first time then the Oz server is started automatically
  - If some box generates code that can be directly sent to the Oz server, then this is done, so that users can directly use the result by some other PWGL box, without an extra run-oz box
  - Other boxes (e.g., constraint applicators) return some abstract data type (object) -- clearly indicating that this can only be used by some special boxes
  - If PWGL is quit, then the Oz server is quit as well

    Hm, allowing users also manually to start/stop the server is probably a good idea (e.g., if server crashes etc.)

  Note: this approach requires that OzServer processes potentially many calls during a single PWGL evaluation without mixing results up. Should the OzServer perhaps run always in expression mode (i.e. non-concurrently) when called by Lisp?
  But for concurrent use with Max I would perhaps better somehow label inputs and outputs to avoid that they can be mixed up...
   

* !? (Automatically) translate the library of constraint definitions by Jacopo into Oz syntax for use in resulting PWGL-Strasheela


