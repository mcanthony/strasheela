
#title Changes 
; #author Torsten Anders

* Changes in Version 0.9.6 (no date yet)

  - Main additions 
    - PrototypeMotif contribution: ..
    - Pattern.useMotifs: a flexible pattern constraint for motifs 

  - Documentation

    - Added examples to HarmonicProgressions-31ET.oz: chord progression with 7-limit triads in septimal minor, chord progression in extended tonality with 7-limit tetrads, and chord progression with 7-limit tetrads forming a sequence (repetition of the sub-chord progressions at different pitches)


  - Fixes and minor changes

    - Pattern.localMaxR added
    - [[../doc/api/node8.html][SDistro]].makeSearchScript (and all Strasheela search engines): Added generic variable ordering 'dom+deg'
    - SMapping: added MapScore
    - Out.midi.note2Midi renamed into Out.midi.noteToMidi for consistency
    - GUtils.extendedScriptToScript: the argument order for extended scripts is swapped, so that extended scripts can be used conveniently as score creator functions in Score.makeScore. All code which uses extended scripts has been adapted (e.g., RT.scoreSearcherWithTimeout and all examples which use that class).
    - Fixed HS.score.chordsToScore bug: arg minIntervalToBass did constrain interval between soprano an next lower voice instead between bass and next higher
    - Fixed Score.scoreObject method init bug: replaced GUI warning again by stdout warning as GUI warning causes exception from within space 
    - Oz primitive Object.is blocks on undetermined FS vars: refactored all calls to it to check for FS vars first (e.g., various type checking functions)
    - Pattern.makeLSystem: fixed bug for N =< 0 (caused infinite loop)
    - Refactored method toInitRecord for class HS.score.note. It now potientially includes the initialisation arguments getChords, isRelatedChord, getScales, isRelatedScale (which are procedures). Nevertheless, by default these are skipped.
    - Pattern: added RotateList, RotateSublists
    - ET22.out/ET31.out: Lilypond notation of scale and chord objects (analytical score objects) refined: if scale/note objects are part of the score, then all their pitch classes are first notated as grace notes. A commonly notated single notes (the chord/scale root) then indicates the duration of the chord/scale. 

  - For further fixes see the [[../CHANGELOG.txt]].


* Changes in Version 0.9.5 (16 April 2008)


  - Main addition 
 
    - The actual playback pitches of notes can be defined by tuning tables for sound synthesis formats such as Csound or MIDI. These tables (Oz tuples) have a format similar to the [[http://www.xs4all.nl/~huygensf/scala/scl_format.html][scale format]] of [[http://www.xs4all.nl/~huygensf/scala][Scala]] (Scala scale file format import is on the TODO list). 
      
      New procedures in [[../doc/api/node2.html][Init]]: SetTuningTable, UnsetTuningTable. Affected methods getValueInMidi ([[../doc/api/node6.html][Score]].pitch) and getPitchInMidi ([[../doc/api/node6.html][Score]].note).


  - Documentation

    - [[../examples/Microtonal-MIDI-examples.oz][Examples]] demonstrating different approaches for creating microtonal MIDI output (e.g., distributing notes over multiple MIDI channels in a round-robin fashion for detuning with pitchbend, and alternatively assigning each monophonic voice its own MIDI channel). Also, the use of tuning tables is demonstrated in these examples.
    - Edited documentation, e.g., of [[../contributions/anders/HarmonisedScore/doc/node1.html][HS]] to reflect the new options with tuning tables
    - Slightly revised and extended the [[../doc/api/node11.html][Out.midi]] documentation 


  - Fixes and minor changes

    - Lilypond output: setting the optional argument to false resulted in invalid lilypond code, an unbalanced "}" (thanks Graham for the patch!)
    - New warning: outputting a score which is not fully determined to Lilypond, MIDI or Csound now results in a warning that the output may block or fail
    - [[../doc/api/node11.html][Out.midi]]: added functions NoteToUserEvent, NoteToPitchbend, CentToPitchbend for MIDI output clause definitions
    - [[../doc/api/node7.html][SMapping]]: added argument excludeSelf to methods collect, forAll, forAllThreaded, mappend, mappend, count, filter, find (these methods are inherited by all score items such as notes and containers) 
    - [[../doc/api/node7.html][SMapping]]: Refactored method collect. Tree traversal is now stateless internally (graph traversal still uses state for marking visited objects)
    - [[../doc/api/node6.html][Score]] Score.copyScore2


  - For further fixes see the [[../CHANGELOG.txt]].


* Changes in Version 0.9.4 (10 April 2008)

  - Revised Lilypond output ([[../doc/api/node9.html][Out]]) 
    - This Strasheela version outputs Lilypond version 2.10.0 code (latest stable release) 
    - Several [[../examples/Lilypond-Examples.oz][examples]] demonstrate the new Lilypond output features
    - Support for enharmonic notation (for enharmonic note objects)   
    - Revised output of chords: a simultaneous container in a staff containing only notes can result in a chord (i.e. notes on a single staff sharing a stem)
    - Support for single staff polyphony: a simultaneous container in a staff can contain further sequential and simultaneous containers which will be notated as polyphonic voices
    - Out.makeLilyTupletClauses: easy Lilypond customisation for tuplet support
    - All Lilypond output procedures and functions support an additional optional argument 'wrapper' for inserting arbitrary Lilypond code at the beginning and end of the Lilypond output file (remember that the previous release already introduced the 'lily' info-tag for inserting arbitrary score object related Lilypond code)
    - New rules for automatic score layout: a staff is implicitly created for a sequential container which is either at the top-level or contained in a top-level simultaneous container. Typical Strasheela score topology for Lilypond output: top-level container is a simultaneous container and its items are sequential containers corresponding to staffs. If the top-level container is a sequential, however, then there is only a single staff. You can define arbitrary other nestings, but in such cases you should explicitly specify which container corresponds to a staff using the mentioned lily info-tag. Moreover, you can also explicitly create staffs which last for the duration of a container only. The implicit staff creation can be switched off entirely by setting the optional argument 'implicitStaffs' to false. 
    - Facilitated customisation by clauses: the following functions are added to [[../doc/api/node9.html][Out]]: ToLilypond2, IsOutmostSeq, IsSingleStaffPolyphony, SingleStaffPolyphonyToLily, IsLilyChord, SimToLilyChord, GetUserLily, LilyRest
    - Revised reference documentation for Out.toLilypond and other Lilypond output related functions
    - Fixed several bugs concerning offset time notation 
    - Removed function: Out.outmostSimToLily 


  - Further Additions
    - Functor [[../contributions/anders/ET22/doc/node1.html][ET22]] for composition in [[http://en.wikipedia.org/wiki/22_equal_temperament][22-tone equal temperament]]
    - [[../contributions/anders/HarmonisedScore/doc/node1.html][HS]].rule: Cadence
    - Functor [[../contributions/anders/ET12/doc/node1.html][ET12]]: convenient 12 ET pitch notation functions
    - [[../doc/api/node8.html][SDistro]].makeSearchScript (and all Strasheela search engines): Added generic variable ordering 'dom/deg'


  - Further Documentation    
    - Added multiple tonal [[../examples/HarmonicProgressions-31ET.oz][chord progression example CSPs]] in 31 ET, partly demonstrating the new cadence constraint and the Schoenberg constraints (introduced in the previous release) 
    - Added [[../examples/HarmonicProgressions-22ET.oz][chord progression example CSPs]] in 22 ET
    - [[../examples/02-Fuxian-firstSpecies-Counterpoint.oz][Fuxian counterpoint example]] revised (now follows Fux' cadence rule) 
    - [[../contributions/anders/HarmonisedScore/examples/HS/Fuxian-Counterpoint-with-Scale.oz][Generalised Fuxian counterpoint example]]: the user can specify the cantus firmus, even in different modes. Also, this example demonstrates the use of scale objects together with note objects.


  - Fixes and minor additions 
    - [[../doc/api/node3.html][GUtils]].randIntoRange never selected upper random limit (and so random value ordering never selected upper domain boundary)
    - The [[../doc/api/node6.html][Score]].pitch class method getValueInMidi now supports any equal temperament pitch unit which fits the pattern et<Digit>+, e.g., et31 or et53. This automatically enables Csound output for these formats (and any other output definition which uses the note pitch method getPitchInMidi).  
    - Revised [[../contributions/anders/ET31/doc/node1.html][ET31]] chord database (e.g., the root of utonal chords like minor is now defined according to common convention as the lower tone of the fifth, not the 1/1)
    - [[../contributions/anders/HarmonisedScore/doc/node1.html][HS]].rules: added constraints DiatonicChord NoteInPCCollection
    - [[../contributions/anders/HarmonisedScore/doc/node1.html][HS]].score: added classes FullChord, ChordNote, ScaleNote
    - Added [[../doc/api/node4.html][LUtils]].lastN
    - Fixed bugs in [[../examples/05-MicrotonalChordProgression.oz]] (harmony database specification and accessing score object info attribute were obsolete)  
    - [[../contributions/anders/HarmonisedScore/doc/node1.html][HS]].rules.schoenberg: fixed ResolveDescendingProgressions (no root repetition by default), added ConstantProgressionR
    - [[../contributions/anders/HarmonisedScore/doc/node1.html][HS]].score.chordsToScore: fixed distribution strategy (was extremely slow if note octave was more restricted than pitch class)


  - For further fixes see the [[../CHANGELOG.txt]].


* Changes in Version 0.9.3 (30 March 2008)

  - Code additions
 
    - Functor [[../contributions/anders/HarmonisedScore/doc/node6.html][HS.rules.schoenberg]]: a generalised version of Schoenbergs guidelines on writing good tonal chord progressions have been implemented as constraints

    - Functor [[../contributions/anders/ET31/doc/node1.html][ET31]] for composition in [[http://en.wikipedia.org/wiki/31_equal_temperament][31-tone equal temperament]]. A [[../contributions/anders/ET31/testing/ET31-test.oz][simple example]] demonstrates this functor with one of the Schoenberg constraints.

    - [[../contributions/anders/HarmonisedScore/doc/node3.html#entity137][HS.score.chordsToScore]]

    - [[../contributions/anders/Pattern/doc/node1.html][Pattern]].percentTrue_Range

    - [[../doc/api/node9.html][Out]]: functions SeqToLily, SimToLily, OutmostSimToLily, and MakeNoteToLily2. These functions simplify customising Lilypond output of sequential and simultaneous containers resp. notes. A number of related functions have been briefly documented.      

 
  - Documentation

    - [[../examples/LilypondOutputWithEnahrmonicNotationKeysignaturesEtc.oz][New example]] demonstrating how users can improve Lilypond output for their purposes: the example defines enharmonic notation, support for key signatures at the beginning of a container and more (these features are meanwhile also supported by the default Lilypond output).

  - Fixes
    - Added support for explicit pause objects and enharmonic notation (for enharmonic note objects like HS.score.enharmonicNote in 12 ET) to the default Lilypond output
    - Arbitrary Lilypond code can be added to container and note objects via a tuple with the label 'lily' given to the info attribute of the score object.
    - HS.score.cMajorDegreeToPC: use Pythagorean C-major scale as reference, not JI C-major scale. This constraint is used for deriving enharmonic information.
    - [[../contributions/anders/HarmonisedScore/doc/node3.html][HS.score]]: a number of type checks for mixing classes have been added: IsInScaleMixinForChord, IsScaleDegreeMixinForChord, IsInversionMixinForChord, IsInChordMixinForNote, IsInScaleMixinForNote, IsEnharmonicSpellingMixinForNote, IsScaleDegreeMixinForNote, IsChordDegreeMixinForNote, IsPitchClassMixin


  - For further fixes see the [[../CHANGELOG.txt]].


* Changes in Version 0.9.2 (20 March 2008)

  - Code additions

    - Support for IOzSeF search engines which can solve complex constraint problems more efficiently. For example, all IOzSeF solvers support adaptive recomputation -- a technique saving memory (see [[http://books.google.com/books?id=BYXNltNPDGAC&pg=PR1&ots=XEZwT73n-z&dq=Programming+Constraint+Services&sig=vfakyMOLFnvtSWHV3_aUGo94iX8][Programming Constraint Services]]). Note that you can enable score output information actions for the IOzSeF 'Explorer' by calling ={Init.addIOzSeFOuts}= (e.g., in your OZRC init file).  

      Added to [[../doc/api/node8.html][SDistro]]: IozsefInit, IozsefInitBest, IozsefExploreOne, IozsefExploreAll, IozsefExploreBest, IozsefSearchOne, IozsefSearchAll, IozsefSearchBest, SearchOneDepth 

    - Concurrent filtering functions, suitable for delayed constraint application

      Added to [[../doc/api/node4.html][LUtils]]: CFilter, CFind

    - Processing of tempo curves and time shift functions, plus further funtionality 

      Added to [[../contributions/anders/Fenv/doc/node1.html][Fenv]]: TimeShiftToTimeMap, Integrate, TempoCurveToTimeMap, ConcatenateTempoCurves, Reciprocal, FenvToMidiCC, ItemFenvToMidiCC, ItemFenvY, TemporalFenvY

    - Minor additions 
      - [[../doc/api/node11.html][Out.midi]].note2Midi
      - [[../contributions/anders/HarmonisedScore/doc/node1.html][HS]].rules.commonPCs_Card


  - Documentation
 
    - First three chapters of the [[StrasheelaTutorial][tutorial]] text and the structure of the tutorial have been revised (thanks Graham!)

    - Added examples which demonstrate how to use continuous controllers in the score, and how to output them to MIDI, see [[../examples/ContinuousControllersInScore-MidiOutput.oz][here]]

    - Revised documentation for [[../doc/api/node8.html][SDistro]].makeSearchScript (explains common interface of all solvers in SDistro). Note that Distro.makeFDDistribution is now marked obsolete (kept for now as some examples use it)

  
  - Fixes

    - Distribution strategy with random value ordering now supports recomputation
      This is a very important fix: a randomisation of the solution is crucial for many musical CSPs and recomputation is essential for solving highly complex problems which would take too much memory (recomputation trades RAM for runtime).

      Refactored SDistro.makeSearchScript, GUtils.makeRandomGenerator and added GUtils.setRandomGeneratorSeed

    - Out.scoreToEvents and Out.midi.scoreToEvents_Midi: now also support processing the top-level score container for output (if it passes the given test) 

    - [[../contributions/anders/Memoize/doc/node1.html][Memo]].memoize now uses a more efficient stateful data structure internally (dictionary instead of record constraints), whereas Memo.memoize2 is fully stateless and thus can be used in a CSP, but is less efficient. Also, changed interface of Memo.memoize into {Memoize Fn ?ClearP ?MemoFn}

    - [[../doc/api/node6.html][Score]].scoreObject info attribute: now convenient adding of 'labeled' info tags as records with a label supported. 

      Revised ScoreObject method hasThisInfo: in case some info value is a record, then it is checked whether its label is given info atom

      New ScoreObject method getInfoRecord returns info record with given label. 

    - HS.score.pitchClassCollection: archiving chords and scales in a solution score is now more stable: the chord/scale index is omitted from the output if chord/scale pitch classes and transposition are determined. That way, even if the chord/scale database was edited  later (e.g., chords were added) so that the indices changed, the archived score will still work as long as the set of pitch classes for the original chords did not change.


  - For further fixes see the [[../CHANGELOG.txt]].



* Changes in Version 0.9.1 (21 January 2008)

  - Code additions
    - Added support for MIDI file import, see its [[../contributions/anders/MidiInput/doc/node1.html][documentation]] and [[../contributions/anders/MidiInput/testing/MidiInput-test.oz][test file]].

    - Extended the harmony model: added classes Interval, and InversionMixinForChord (plus related classes like MakeInversionChordClass) and procedures PitchClassToPitch2, NoteInterval, and TransposeNote to the functor HS.score, and convenience functions GetChordIndex, GetScaleIndex, and GetIntervalIndex to the functor HS.db.
      See the documentation for [[../contributions/anders/HarmonisedScore/doc/node3.html][HS.score]] and [[../contributions/anders/HarmonisedScore/doc/node2.html][HS.db]]. Some simple examples are in the test file [[../contributions/anders/HarmonisedScore/testing/Score-test.oz][Score-test.oz]] (an InversionMixinForChord example in the the middle of the file, an Interval example is at the bottom).

    -  Added to MIDI file output (Out.midi) the definitions IsCSVEvent, HasType, IsNoteOn, IsNoteOff, HasChannel, TicksToBeats, see the [[../doc/api/node11.html][documentation]].

    - Added class Score.leaveUninitialisedParameterMixin, see the [[../doc/api/node6.html][documentation]].

    - Added class SMapping.forNumericRangeArgs, see the [[../doc/api/node7.html][documentation]]. 


  - Documentation
    
    - Revised beginning of the tutorial (thanks Graham!!). 
    - Extended the music representation chapter: added an explanation for user-defined export procedures.
    - Revised sections of the reference, e.g., the [[../contributions/anders/HarmonisedScore/doc/node1.html][introduction to the harmony model]]
    - I realised a more suitable approach for the convenient delayed constraint application, a technique for constraining score contexts which are inaccessible in the problem definition. See my thesis [[http://strasheela.sourceforge.net/documents/TorstenAnders-PhDThesis.pdf][Composing Music by Composing Rules]], Sec. 6.3 "Constraining Inaccessible Score Contexts" for a discussion of this matter, and the example [[../testing/zy_Efficiency/compare-DelayingConstraint-ReifiedConstraint.oz][here]] for a demonstration of the new approach.
    - Extended the installation documentation (e.g. documentation of the init file templates).


  - Fixed bugs etc.
   
    - Score.copyScore did not create variable copies before.
    - HS.score.pcSetToSequence could not handle cases where its arg Root is not in its arg PCFS.
    - HS.score.pitchClassToPitch and HS.score.pitchClassToPitch2 now can also be used like a deterministic functions.
    - HS.db.setDB now has a refined handling of optional arguments and I added support for arbitrary equal temperament tunings (e.g., if PitchesPerOctave is set to 31 -- meaning 31 tone equal temperament -- then atom 'et31' is created for the pitch unit). 
    - New procedure Memo.memoize2 allows use of function memoization inside constraint scripts (in contrast to the original Memo.memoize).
    - Pattern.someTrue/Pattern.someTrueR wrongly behaved like Pattern.oneTrue (thanks Graham for the patch!).
    - Refactoring: moved ExtendedScriptToScript from Realtime to GUtils. 


  - For further fixes see the [[../CHANGELOG.txt]].


* Changes in Version 0.9 (2 October 2007)
  
  - Added solvers for real-time constraint programming (see the documentation at [[../contributions/anders/Realtime/doc/index.html]], and examples at [[../contributions/anders/Realtime/examples]] and [[../contributions/anders/Realtime/testing]])

  - Added an OpenSound Control interface (see the documentation at [[../contributions/anders/OSC/doc/index.html]], and examples at [[../contributions/anders/OSC/examples]] and [[../contributions/anders/OSC/testing]])

  - Added example for multi-core CPU machines at [[../examples/Parallel-Search.oz]] (see the [[http://www.mozart-oz.org/documentation/system/node13.html][Oz documentation]] for details on parallel search engines)

  - The installation process has been simplified for package creators (cf. the [[Installation#forPackageCreators][installation notes for package creators]])

  - Refactored MIDI output

  - Generalised Out.shell for arbitrary interactive commandline programs (examples in test file include the interactive ruby shell and the Steel Bank Common Lisp compiler)

  - Fixed bug in example 01-AllIntervalSeries.oz for length \= 12

  - Fixed bug in OzServer: compiler now waits for results before outputting anything

  - For further fixes see [[../CHANGELOG.txt]]


* Changes in Version 0.8.3 (5 August 2007)

   - Documentation Additions

     - [[StrasheelaTutorial][Interactive Oz/Strasheela tutorial]]  (first version)

     - Monograph on Strasheela meanwhile available for [[http://strasheela.sourceforge.net/documents/TorstenAnders-PhDThesis.pdf][download]] 

     - Extended documentation of [[StrasheelaExamples][Strasheela Examples]]

     - Template for Strasheela extensions at [[../contributions/ExtensionTemplate]]


  - Code Additions 

    - [[../contributions/anders/ScoreInspector/doc/node1.html][ScoreInspector]]

    - Complete rewrite of [[../contributions/anders/Fenv/doc/node1.html][Fenv]] (function envelope)

    - [[../contributions/anders/Gnuplot/doc/node1.html][Gnuplot interface]]

    - Extended/refactored the [[../contributions/anders/Motif/doc/node1.html][Motif]] contribution (e.g. new Motif.makeVariation considerable simplifies Motif definition, the set of test cases/examples is extended)

    - Extended the [[../contributions/anders/HarmonisedScore/doc/node1.html][HS (HarmonisedScore)]] contribution: added notion of degrees (e.g., scale degrees, but implicitly also enharmonic spelling): see, e.g., classes FullNote, EnharmonicNote, ScaleDegreeNote, ChordDegreeNote, and ScaleDegreeChord in functor [[../contributions/anders/HarmonisedScore/doc/node3.html][HS.score]].

    - [[../contributions/anders/SettingsGUI/doc/node1.html][SettingsGUI]] (first version)

    - Extensions of the core Strasheela music representation (e.g., Out.saveScore, Out.loadScore, Score.copyScore, methods to [[../doc/api/node6.html#entity172][Score.scoreObject]]: unify, '==')

    - Added reflection capabilities to score objects: all score objects inherit from class [[../doc/api/node6.html#entity217][Reflection]] methods such as getClass, getClassName, getFeatures, getAttrNames etc.



  - Other Fixes 

    - Important improvement of Strasheela initialisation (i.e., [[../_ozrc]]): please update your OZRC accordingly

    - Fixed bug which prevented MIDI output (removed illegal empty line in CSV output...)

    - Refactored transformation of score objects into the textual score format. Fixed some issues, and simplified the definition of new user classes

    - Refactored Strasheela's error messaging

    - Extended [[http://www.amazon.com/gp/product/030680106X/sr=8-3/qid=1149574638/ref=pd_bbs_3/104-1993379-1061553?%5Fencoding=UTF8][Partch]] [[../contributions/anders/HarmonisedScore/doc/node8.html][harmony database]] (e.g. added information to intervals)

    - Fixed various documentation details in the reference 
  
    - Many fixes in Oz' Path functor

    - Many, many other fixes, see [[../CHANGELOG.txt][Strasheela/CHANGELOG.txt]] for details



* Changes in Version 0.8.2 (1 January 2007)

  - Substantial extensions and debugging of the [[../contributions/anders/OzServer/doc/node1.html][OzServer]]

  - Added a Lisp client for the OzServer which allows to call Strasheela from within Common Lisp and use the result of these calls in Lisp programs (see [[../contributions/anders/OzServer/clients/oz-server-lisp-client]]). For this purpose, the OzServer can transform results implicitly into Lisp syntax (see [[../doc/api/node9.html#entity339][Out.ozToLisp]]). Tests are provided for SBCL on Linux and LispWorks on MacOS

  - Lilypond output made ready for new [[http://lilypond.org][Lilypond]] versions (temporary solution: just calling convert-ly first)

  - Fixed Bug in MIDI output causing timing errors 

  - More fixes (for details see [[../CHANGELOG.txt][Strasheela/CHANGELOG.txt]], and the Strasheela subversion interface at http://strasheela.svn.sourceforge.net/viewvc/strasheela/)


* Changes in Version 0.8.1 (7 September 2006)

  - Revised [[Installation][installation instructions]] (reacting to frequently asked questions..) and other documentation

  - Added support for further output formats: ENP (the format of [[http://www2.siba.fi/PWGL/][PWGL]]), and [[http://common-lisp.net/project/fomus/][Fomus]] -- and that way export to Finale and Sibelius (thanks Kilian!)
 
  - Added example [[../examples/07-Harmonised-L-system.oz][Harmonised-L-system]], and revised explanation in existing examples

  - Added =handle= attribute to all score objects in textual Strasheela score (cf. the =handle= attribute in [[http://www.mozart-oz.org/documentation/mozart-stdlib/wp/qtk/html/index.html][QTk]])

  - Added [[../contributions/anders/HarmonisedScore/doc/node3.html#entity89][HS.score.harmoniseScore]], a function to simplify the definition of harmonic CSPs

  - Bugfix for =Out.playSound= 

  - Debugged Common Music output

  - Various other fixes (see [[../CHANGELOG.txt][Strasheela/CHANGELOG.txt]])


* Changes in Version 0.8 (5 June 2006, initial release)

No changes in the initial release ;-)

