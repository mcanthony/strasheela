#title Oz Basics

<contents depth="2">

* About this document

This file was automatically generated from the interactive Strasheela tutorial. Some aspects of the text only make sense in the original interactive tutorial application (e.g., buttons indicated to press, and positions specified on the screen), and not in this version of the text.

* -- Oz Basics

This chapter covers fundamental concepts in Oz.
  



* This tutorial

This interactive tutorial demonstrates the basics of the Oz programming language and Strasheela.  By presenting small code snippets which can be easily executed and edited, we hope to simply the process of learning about Oz/Strasheela.

Nevertheless, this tutorial is kept brief.  The explanation of Oz focuses on aspects which are particularly important for Strasheela, and even Strasheela concepts are only briefly outlined.  In other words, it is not the intention of this tutorial to replace the extensive documentation already available on Oz, nor my thesis on Strasheela ;-)

This tutorial is organised in small lessons.  After you started the interactive tutorial application, you can select the examples in the list at the top-left of this window.  Many lessons consist of several sub-examples, accesible via the list in the bottom-right corner.  These examples are best studied in their order.

(if you are reading the tutorial in your HTML browser, of course there are no lists of lessons and examples)


** Conventions

<src lang="oz">
/*
We use a few conventions to present information in this tutorial:

  - `command': in the running text, code in the Oz language is enclosed
      in `single quotes'; remove them when writing your own code.
  - {...}: the {curly braces} denote a procedure in Oz; you should never
      remove them when writing your own code.
  - WARNING: explains a particularly confusing part of the Oz language.
  - BACKGROUND: these examples give brief explanations of generic
      concepts in Computer Science; please see them if the lesson contains
      unfamiliar terms.
*/

</src>

** BACKGROUND

<src lang="oz">
/*
For explanations about general concepts, see:

  - van Roy and Haridi (2004). Concepts, Techniques, and Models of
      Computer Programming. MIT Press.
      http://www.info.ucl.ac.be/~pvr/book.html
  - The Oz documentation:
      http://www.mozart-oz.org/documentation/
  - Wikipedia (maybe?  -I'd rather find a better resource, though) TODO
*/

</src>

* Hello World and Comments

By convention, the first steps in any programming langauge is to output the text "Hello World!".  This tutorial obeys this rule.  :)

Hit the [Run] button in the bottom-left corner to execute this example.  The other examples demonstrate alternative ways to output information:

  - Browse: opens a Browse window
  - Show: outputs text to standard out
  - Inspect: opens an Inspect window

(the Browse and Inspect windows might be hidden behind this window)


Oz supports line comments and block comments.  Please select each example to see how these comments differ.

(Executing these comment-examples does nothing, of course!)

** Browse

<src lang="oz">
{Browse 'Hello World!'}
</src>

** Show

<src lang="oz">
/* Show something at standard out (the commandline where you started
this tutorial). */

{Show 'Hello World!'}
</src>

** Inspect

<src lang="oz">
/* The inspector shows sometimes more information than the Browser
(depending on the inspected value).  The inspector may be hidden behind
this tutorial.. */

{Inspect 'Hello World!'}
</src>

** Line comment

<src lang="oz">
% this is a line comment
</src>

** Block comment

<src lang="oz">
/*
this is a
block
comment
*/
</src>

* Calculator

This example executes simple numeric calculations and displays the result. 
  
Try changing the calculation by using different numbers and freely combining the operators +, -, * , ~ (negation), div (integer division), mod (integer modulus) and / (float division).  You may also use parenthesis to indicate precedence.
  
You can use integers (e.g. 3, 7) and floats (e.g. 1.0, 3.14).  However, you can not directly mix integers and floats in a calculation (in that case, an error will be printed at the command line).

** Integer example 1

<src lang="oz">
{Browse 3+4}
</src>

** Integer example 2

<src lang="oz">
%% ~ is the negation sign
{Browse ~7 * 5}
</src>

** Integer example 3

<src lang="oz">
{Browse (4 + 2) div 2}
</src>

** Float example 1

<src lang="oz">
{Browse 3.0 / ~2.0}
</src>

** Float example 2

<src lang="oz">
/* A float is converted into the closest integer
with the function FloatToInt (in case two integers are equally close it rounds
to the closest even integer).  There is also a function IntToFloat. */

{Browse {FloatToInt 3.5}}
</src>

** Float example 3

<src lang="oz">
%% many other numeric functions are available for floats,
%% e.g., Exp, Log, Sin, Cos...
{Browse {Sqrt 9.0}}
</src>

* Variables

All variables in Oz must start with a capital letter.  They must be declared first, for example, with the keyword `local'.

Global variables can be introduced with the keyword 'declare'.  However, global variables are intended for testing and are not supported in this tutorial application.

WARNING: Oz variables are single assignment variables.  If you do not have experience with functional or logic programming languages, we highly recommend reading the background example!  Variables may be bound to a value, or may be left unbound or even partially bound (for compound data types such as lists). However, their value can never be changed! 

Rewritable data storage is also supported by Oz; they are called Cells.

** Variable declaration

<src lang="oz">
local
   X = 1 + 1
   Y
in
   Y = 3
   {Browse X*Y}
end
</src>

** Variable scope

<src lang="oz">
/* Local statements can be freely nested (like
virtually everything in Oz).  Oz supports static or lexical scope (i.e. a
variable always refers to its nearest enclosing binding). */

local
   X = 3
in
  local 
    %% shadows the outer X
    X = 4
  in
    {Browse X}
  end
  %% later, browse original X 
  {Browse X}
end
</src>

** A variable can be unbound

<src lang="oz">
/* Watch the Browser: X is first unbound (_ is displayed).
X is bound to 3 after 2000 msec. */

local
   X 
in
   {Browse X}
   {Delay 2000}
   X = 3
end
</src>

** Cells

<src lang="oz">
/* Cells provide rewritable memory for values.
WARNING: The syntax for reading and writing to cells is different than
the syntax for variables.
*/
local
  C = {NewCell 0}  % create new cell with initial value 0 
  V
in
  {Browse @C}      % browse cell value
  {Delay 2000}
  C := 5           % change cell value to 0 (stateful operation)
  {Browse @C}      
  V = @C
  {Browse V}
end

</src>

** BACKGROUND

<src lang="oz">
/*
TODO Torsten: revise terminology

Terms: single assignment, logic variable, bound/determined variables,
unbound/free variables, local variables, global variables.

In mainstream programming languages, variables may be read and written
at will. Actually, a better term for them may be "mutables".  This often
confuses new programmers, since variables in math do not operate this
way -- once the value of a variable is set, it stays set.

In Oz, variables operate more like math variables. Assigning a value
to a variable is called "binding"; once a variable is "bound", it
cannot be changed.  Variables are "free" (have no value) by default,
and compound variables (such as lists) may be "partially bound" (ie
some elements may be bound, while others are unbound).


Reading: 

  - van Roy and Haridi, Chap. 1-2 (in particular Sec. 1.2, and 2.2).
  - Oz Tutorial, Chap. 3, introduction
*/

</src>

* If

Oz provides the usual `if' control structure.  Note that unlike many programming languages, parenthesis () are not required around the condition, althought they may make the code easier to read.

Please note that the `if' control structure can also be used as an expression which returns a value from the `then' or `else' clause.


** if ... else ... end

<src lang="oz">
%% try changing 2 to 6... 

if (2 < 5) then
    {Browse less}
else
    {Browse more}
end
</src>

** if ... end

<src lang="oz">
/* The `else' clause is optional. This example does nothing, but try
changing `==' to `\=.' The operations `==' and `\=' test equality and
inequality of values. */

if (this == that) then
    {Browse hi}
end
</src>

** if as an expression

<src lang="oz">
%% This `if' returns a value, which is browsed.

{Browse 
 if (2 < 5) then less else more end}
</src>

* Procedure and Functions

Procedures and functions are the standard means for expressing a collection of computations in a single entity.  Examples range from numeric computations to commands involving the operating system.  For example, we have already seen a number of numeric operations expressed by the common infix notation.

WARNING: curly braces {...} must surround a function or a procedure call.  This syntax for procedure/function application is rather unusual when compared with other programming languages, but it is also unambiguous. 

In Oz, procedures are the fundamental concept.  Functions are just a syntactic variant of procedures, added for convenience.  The main difference between functions and procedures is that functions are procedures which always returns exactly one value.  Procedures do not necessarily return anything.

More specifically, a function is a procedure whose last argument -- the return value -- is expressed implicitly.  Every function may be called like a procedure by adding this return value explicitly.  In addition, any procedure can also be called as a function which returns its omitted last argument. 
  

** Usage

<src lang="oz">
%% call procedure Browse with the result of function IsEven
%% IsEven expects one integer as an argument, and returns true or false.
%% Browse expects one argument (any variable type), and returns nothing.

{Browse
 %% call function IsEven
 {IsEven 3}}
</src>

** Functions are procedures

<src lang="oz">
/* Here we treat IsEven as a procedure with two arguments.
IsEven binds the variable B.  Please note the order of computations in this
example.  Firstly, B is browsed.  Then IsEven binds B to false.  However, Browse
does indeed show the correct value of B.

This demonstrates a vital feature of Oz: variables are be used to
communicate information between different parts of a program -- even
if the information is not available yet.  Browse can handle unknown
information, but other parts of the program may wait (i.e. block)
until the information is available.  */

local B in
   {Browse B} 		
   {IsEven 4 B}
end
</src>

** Procedures used like functions

<src lang="oz">
/* Because functions are just a syntactic variant of procedures, every
procedure (e.g.  Browse) can also be used like a function which
returns its last argument. */

local X = {Browse}
in
  X = 3
end
</src>

** -next

<src lang="oz">

/*
A procedure definition wraps up (abstracts) some computation: a complex computation can then be executed simply by calling the procedure.  In the example, the procedure Max gets two numbers as its first two arguments and binds its last argument to the greater number (>= means 'greater or equal').  Note that the curly braces in the definition surround the procedure name and its arguments like a procedure call.
*/

</src>

** Max procedure

<src lang="oz">
/* NB: the variable X in the Max definition and the variable X outside
are different variables (cf. variable scope above). */

local
  %% procedure definition
  proc {Max X Y Z}
     if X >= Y then Z = X else Z = Y end 
  end 
  X
in
  %% procedure application
  {Max 4 3 X}
  {Browse X}
end
</src>

** $ marks a return value

<src lang="oz">
/* Every procedure argument can be a return value.  The $ (dollar sign)
always marks a return value.  This example is not yet very convincing,
but procedures will encapsulate constraints in later examples... */

local
   proc {Max X Y Z}
      if X >= Y then Z = X else Z = Y end 
   end 
   X = 4
   Result
in
   %% Note the $
   X = {Max $ 3 Result}
   {Browse Result}   
end
</src>

** Function call of procedure

<src lang="oz">
%% Remember, every procedure can also be called like a function for convenience.

local
  proc {Max X Y Z}
     if X >= Y then Z = X else Z = Y end 
  end
in
  {Browse {Max 4 3}}
end
</src>

** --next

<src lang="oz">

Oz offers a simplified notation (syntactic sugar) for a procedure
definition which returns its last value: it can be defined as a
function.

</src>

** Max function

<src lang="oz">
%% This Max function is equivalent to the Max procedure of the previous lesson.

local
  fun {Max X Y}
     if X >= Y then X else Y end 
  end
in
  {Browse {Max 4 3}}
end
</src>

** Recursion

<src lang="oz">
/* Procedures and functions can call themselves (recursion).  The
function Factorial implements the mathematical factorial concept. */

local
   fun {Factorial N}
      if N==0
      then 1
      else N * {Factorial N-1}
      end
   end
in
   %% 10! = 3628800
   {Browse
    {Factorial 10}}
end
</src>

** BACKGROUND

<src lang="oz">
/*
Terms: procedure, function.

Procedures and functions are the standard means for expressing a
collection of computations in a single entity.  Examples range
from numeric computations to commands involving the operating
system.  For example, we have already seen a number of numeric
operations expressed by the common infix notation.

A procedure definition wraps up (abstracts) some computation: a
complex computation can then be executed simply by calling the
procedure.
*/

</src>

* Atoms and Names

Oz provides a number of basic data types which have a specific textual representation in source code.  We have already seen numbers (i.e. integers and floats).  Here we shall discuss two other data types: Atoms and Names.

Atom:
The safest way to create an atom is to surround it in single quotes: 'hi there'..  Atoms may also be written as text (without spaces) as long as they do not start with a capital letter (those are variables) and the text is not an Oz keyword.  For simplicity, we recommend using 'single quotes'.  ;)

Name:
There are a few things which look like atoms, but are a different variable type: Name.  The boolean values true and false are both Names (specifically, the Bool subtype).  Another often used value which looks like an atom is unit (also a name).

** Atoms

<src lang="oz">
%% Several atoms are inspected below. (Remember that the inspector window
%% might open behind the tutorial!)

{Inspect 'I am an atom'}
{Inspect iAmAnAtom}
{Inspect test}
{Inspect nil}
%% if is an Oz keyword, but 'if' is an atom
{Inspect 'if'}
{Inspect '=='}
</src>

** Equality

<src lang="oz">
{Inspect test == 'test'}
</src>

** Names

<src lang="oz">
/* The values `true', `false' and `unit' are values which are similar
to atoms, but which play a special role (note that the quotes don't
belong to the values here). Obviously, `true' and `false' are the
common boolean values. Oz provides the value `unit' for the computer
science concept of the unit type (a value which is intended to express
no further information). For example, `unit' is often used wherever a
token is needed whose value is not important. */

{Inspect true}
{Inspect false}
{Inspect unit}

%% The Inspector shows atoms and names in different colors
{Inspect 'I am an atom'}
</src>

* Compound Types

Besides the atomic types discussed before, Oz also provides compound data types: records, tuples, lists, and strings.

Internally, all of these data types are actually records (just like all functions are actually procedures).  Tuples, lists, and strings just provide a different syntax for interacting with records.

** Records (1)

<src lang="oz">
%% A record has a label and consists of feature-value pairs.

{Inspect label(feature1:value1 feature2:value2)}
</src>

** Records (2)

<src lang="oz">
%% Records can be freely nested. 
  
{Inspect test(1:hi 2:there x:unit(foo:bar))}
</src>

** Records (3)

<src lang="oz">
/* Integer features can be omitted.  The following example is identical to the previous. */

{Inspect test(hi there x:unit(foo:bar))}
</src>

** Accessing record fields

<src lang="oz">
/* Record fields are accessed with the dot operator.  R.X returns the
value stored at feature X in record R.  Records support constant-time
access (i.e. the time the access takes is independent of the feature
position). */

{Inspect test(x:hi y:there).x}
</src>

** Tuples (1)

<src lang="oz">
%% A tuple consists of a label and values.

{Inspect label(value1 value2 value3)}
</src>

** Tuples (2)

<src lang="oz">
/* Actually, a tuple is a record which has only integer features in
ascending order.  These features can be omitted.  The two records below
are equivalent. */

{Inspect unit(1:a 2:b 3:c) == unit(a b c)}
</src>

** Tuples (3)

<src lang="oz">
%% An atom is an "empty" tuple.

{Inspect test() == test}
</src>

** Lists (1)

<src lang="oz">
%% A list is a sequence of values.

{Browse [value1 value2 value3]}
</src>

** Lists (2)

<src lang="oz">
/* A list can also be written using | (cf. cons in Lisp). nil is the
empty list, which terminates every list. */

{Inspect a|b|c|nil}
</src>

** Lists (3)

<src lang="oz">
%% Actually, a list is a nested tuple with the labels '|'.

{Inspect [a b c] == '|'(a '|'(b '|'(c nil)))}
</src>

** Lists (4)

<src lang="oz">
/* Consequently, the first element of a list can be accessed under the
feature 1, and the remaining list under the feature 2. */
  
{Inspect [a b c].2}
</src>

** Pairs (1)

<src lang="oz">
%% A pair is a convenient way of concatenating values. 

{Inspect value1 # value2 # value3}
</src>

** Pairs (2)

<src lang="oz">
%% Actually, a pair is a tuple with the label '#'.

{Inspect a#b#c  == '#'(a b c)}
</src>

** Strings (1)

<src lang="oz">
/* A string is a list of integers denoting characters (i.e. all list
procedures can be used for strings). */

{Inspect "test" == [116 101 115 116]}
</src>

** Strings (2)

<src lang="oz">
/* Although a string is just a list of integers, you can show strings
as text in the Browser and the Inspector.  However, you need to
configure them for showing strings first.  In the Inspector Preference
settings (Options menu), select the tab Appearance and tick "Show
Strings".  You need to do these settings before you inspect a
string. */

{Inspect "This is a string!"}
</src>

** Virtual Strings

<src lang="oz">
/* A virtual string (VS) is a (possibly nested) concatenation of
strings, atoms, and numbers.  Many procedures expecting strings as
arguments can also handle virtual strings for convenience. */
  
local 
  VS = 'my test '
in
  {Inspect VS#3}
end
</src>

* Understanding error messages

When we do program, we almost inevitably write bugs
sometimes.  Luckily, when confronted with specific problems in
programs, compilers try to tell us about the problem (naturally, the
real hard bugs are the ones no compiler complains about).  All errors
are actually raised exceptions (see the Tutorial of Oz, Sec. 5.10 for
more details).

The compiler is your friend, so this example introduces you to some
typical Oz error messages ;-) During your programming sessions,
carefully reading error messages can save you much time.  In this
tutorial, all these messages are shown at the shell (or in the DOS
box) where you started the tutorial.  The Oz Programming Interface
(OPI) even supports moving to the code where the bug is likely to be
located (see the Tutorial of Oz, Sec. 2.3.3).

BTW: the error messages of this tutorial are slightly obscured
unfortunately by some trick which keeps the tutorial application
running even in the case of an error: there are always a few lines of
other code before the actual error message.  Also, the reported line
number is not correct, because the tutorial application adds a few
lines to each example (the resulting full example is shown just before
the error message).


** Parse error

<src lang="oz">
%% The left curly brace does not match the right parenthesis

{Browse hello)
</src>

** Static analysis error

<src lang="oz">
%% Browse expects only a single argument

{Browse hi there}
</src>

** Binding analysis error

<src lang="oz">
%% Variable X is not declared 

X = 3
</src>

** Type error

<src lang="oz">
%% We can not add an integer and a float 

{Browse 3 + 2.0}
</src>

** Failure

<src lang="oz">
/* Inconsistent constraint programs result in a failure.  Failures play
an important role internally in a constraint solver searching for
solutions to a constraint satisfaction problem. */

local
   X = 3
in
   3 + 4 =: X
end
</src>

* -- Basics (2) TODO name

This chapter covers more basic info about Oz.



* Pattern Matching

Pattern matching is a convenient way to access the elements contained in records, lists etc.  Pattern matching decomposes such compound data, declares new variables, and binds these variables to parts of the compound data.  

The primary pattern matching construct is the case statement, but some programming constructs (for example, functions) allow pattern matching via an implicit case statement.


** Case statements (1)

<src lang="oz">
 /* In the example below, case declares the two variables H and T and
binds them to the head and tail of the list Xs.  Finally, the H and T are
inspected.  Please note that the pattern-matching expression H|T is written
with the usual list syntax using | (the cons-operation). 

This approach can be used to pattern match lists of arbitrary length,
except empty lists (i.e. nil). Try to change the definition of Xs to a
list of a different length and watch how the value of T changes. */

local
   Xs = [1 2 3 4]
in
   case Xs of H | T
   then {Inspect H} {Inspect T}
   end
end
</src>

** Case statements (2)

<src lang="oz">
/* The previous example matched the head and the tail of a
list. Instead, we can also match individual list elements (or the
elements of other data structures, such as records or tuples). Note
that in this example changing the length of the lists results in an
error. */

local
   Xs = [1 2 3 4]
in
   case Xs of [A B C D]
   then {Inspect A} {Inspect B} {Inspect C} {Inspect D}
   end
end
</src>

** Multiple case clauses

<src lang="oz">
/* Having only a single clause to match against (as in the previous
examples), can be too restrictive. This example presents a typical
case expression matching a list, which checks whether Xs is either a
non-empty list, or an empty list, or some other value. You may want to
play around with the value of Xs to try out these different
clauses. */

local Xs = [1 2 3 4]
in
   case Xs of  H|T then {Inspect nonEmptyList}
      [] nil then {Inspect emptyList}
      else {Inspect differentValue}
   end 
end
</src>

** Implicit pattern matching

<src lang="oz">
/* The following function GetPitch expects a record as
argument which must match the record note(pitch:Pitch ...).  The
variable Pitch is implicitly declared and bound to the value at the
feature 'pitch' of the record given as argument to the function.

Please note that the record in the header of the function
GetPitch is not even complete but contains three dots (...) to
indicate that further record features are possible. */

local
   fun {GetPitch note(pitch:Pitch ...)}
      Pitch
   end
in
   {Inspect {GetPitch note(duration:4 pitch:60)}}
end
</src>

* Procedures over Compound Data

Oz provides a rich set of procedures for processing these compound data such as lists and records.  A few examples are shown here.  More procedures are listed in the reference documentation at

   http://www.mozart-oz.org/documentation/base/index.html


** HasFeature

<src lang="oz">
%% Tests whether a record has a certain feature

{Inspect {HasFeature unit(x:1 y:2 z:3) y}}
</src>

** Arity

<src lang="oz">
%% Return the features of a record as a list.

{Inspect {Arity unit(a b x:1 y:2 z:3)}}
</src>

** Adjoin

<src lang="oz">
/* "Merge" two records.  Note that features and label of the second
record take precedence over the first. */

{Inspect {Adjoin unit(x:1 y:2 z:3) test(foo:hi bar:there z:'overwrite!')}}
</src>

** Nth

<src lang="oz">
%% Return the nth element of a list.

{Inspect {Nth [a b c d] 2}}
</src>

** Reverse

<src lang="oz">
%% Reverse a list.

{Inspect {Reverse [a b c d]}}
</src>

** Append

<src lang="oz">
%% Append two lists.

{Inspect {Append [a b] [x y]}}
</src>

** User-defined procedures

<src lang="oz">
/* You can define procedures over lists and records as easily as
numeric procedures.  Following is the definition of the function
Append. */

local
  fun {Append Xs Ys}
    if Xs == nil then Ys
    else Xs.1 | {Append Xs.2 Ys}
    end
  end
in
  {Inspect {Append [a b] [x y]}}
end
</src>

* Unification

The operator = performs unification of two variables.  The variables quasi share all the information they have about their values.  A variable without a name (an anonymous variable) is written as an underscore ( _ ).  Unification is a basic form of constraint programming (constraint programming is discussed further below).


** Unifying two lists

<src lang="oz">
local 
  X = [a _ _] 
  Y = [_ b _]
in 
  X = Y          % unify X and Y
  {Inspect X}
end
</src>

** Recursive unification

<src lang="oz">
/* Unification also works recursively.  The Inspector and the Browser
show two different ways for representing that (the Inspector can be
configured to show either way: options menu, structure tab, under
representation, select between tree and relation mode). */

local X = unit(x:X) in 
  {Browse X}
  {Inspect X}
end
</src>

* Class Method Application

Oz supports object-oriented programming.  This programming paradigm introduces the notion of objects which instantiate classes.  An object (or class instance) is a datum which encapsulates its internal structure.  A class specifies what data are contained in its instances and what methods these instances understands.  A method (or message) is effectively a procedure which is defined for instances of specific classes only.

For more details on object-oriented programming in general, please refer to other Oz documentation:
    http://www.mozart-oz.org/documentation/tutorial/node10.html

Internally, objects are actually procedures which expect a single argument -- hence this syntax.  When the object is sent a message (i.e. the procedure is called with a specific argument) it processes the message according to its definition.  This method definition may change its internal state, as we expect from typical objects.

** Method call

<src lang="oz">
/* The following example creates a graphical user interface
button.  You do not need to understand the code which creates the
window itself (i.e., the call to QTk.build).  For our purposes here,
only this single line is important:

  {Window show}

`Window' is an object, and `show' is the name of the method understood by
this object.  This method results in showing the window with the button.

Please note that the syntax of a method differs clearly from the procedure
syntax shown before.  If `show' was a procedure, then we would write:

  {Show Window}
*/

local
   Window = {QTk.build lr(button(text:"Hello world!" 
				 action:toplevel#close))}
in
   {Window show}
end
</src>

** Method arguments

<src lang="oz">
/* Class methods are actually records which can contain method
arguments.  For example, the following statement sends the following
message to the object Window.  This changes the width of the border around
the button and sets the background of this border to the color blue.

  {Window set(borderwidth:1.0#c background:blue)}

In general, the record denoting a message can wrap multiple arguments,
as in the following example where the method myMethod with two
arguments is send to the class MyObject.

   {MyObject myMethod(Arg1 Arg2 ..)} 

We will later see many more method application examples in the context
of Strasheela's music representation. */

local
   Window = {QTk.build lr(button(text:"Hello world!" 
				 action:toplevel#close))}
in
   {Window show}
   %% change to button background color after 1000 msecs
   {Delay 1000}
   {Window set(borderwidth:1.0#c 
               background:blue)}
end
</src>

* Higher-Order Programming

Oz procedures (and functions) are first-class values.  This means that a procedure can be processed like any other value.  For example, procedures can be given to other procedures as arguments.

This leads to highly flexible programming technique called higher-order programming.  Procedures expecting procedures as arguments are called higher-order procedures.  This concept is demonstrated be several examples.

** Filter

<src lang="oz">
/* The function Filter expects a list and a test function, and returns
only those elements for which the test function returns true.

The function IsEven returns true for even integers and thus a list
with only the even integers in [~3 ~2 ~1 0 1 2 3] is returned.  Try
replaying IsEven by IsOdd, IsNumber or IsNat (testing for natural
numbers) to better understand this filtering.

(BTW: there is a bug in IsOdd concerning negative numbers)
*/

{Browse {Filter [~ 4 ~3 ~2 ~1 0 1 2 3] IsEven}}
</src>

** ForAll

<src lang="oz">
/* The procedure ForAll applies a given procedure to any element of a
list.  In this example, the procedure Browse is applied to every list
element. */

{ForAll [a b c d e f] Browse}
</src>

** Map

<src lang="oz">
/* The function Map expects a list and a unary function (i.e. a
function expecting a single value) as arguments.  It applies the
function to every list element, and returns the collected results in a
list.

The example defines and uses the function square in order to square
all numbers in the list.  You may want to change this function to
understand that any function can be given to a higher-order function
as an argument.  For example, replace Square by a function Double,
which doubles its argument. */

local
  fun {Square X} X * X end
in
  {Browse {Map [1 2 3 4 5 6] Square}}
end
</src>

** Anonymous procedure definition

<src lang="oz">
/* Sometimes we need a function only once -- as the function Square in
the previous example.  In such cases we don't necessarily need to care
about giving the function any name.  Instead, we can define an
anonymous function.

This example restates the previous example by defining the Square
function 'inline' without giving it any name.  Please recall that $
always denotes a return value.  In this case, $ returns the function
value itself. */

{Browse 
 {Map [1 2 3 4 5 6] fun {$ X} X * X end}}
</src>

** Sort (1)

<src lang="oz">
/* The function Sort expects a list and a binary function (i.e. a
function expecting two values) as arguments.  This binary function
compares two values, and Sort sorts the list values according to this
comparison.  For example, the function in the example compares two
numbers and returns true if the first number is smaller.  Consequently,
this example sorts the list elements in ascending order.  You may want
to replace the < by > in the function definition to sort the
numbers in decreasing order. */

{Browse {Sort [1 5 3 2 0 7] fun {$ X Y}  X < Y end}}
</src>

** Sort (2)

<src lang="oz">
/* You can actually sort the list elements in any way you want using
the Sort function.  For example, you may place all even numbers at the
beginning and all odd numbers at the end of the list and sort all even
and odd numbers in ascending order.  This is done in the second
(commented) Sort call.  How does this sorting work? */

{Browse {Sort [1 5 3 2 0 7] fun {$ X Y} 
                              if {IsEven X} 
			      then
			        if {IsEven Y}
				then X < Y
				else true
				end
			      else false
			      end
                            end}}
</src>

** Defining higher-order procedures

<src lang="oz">
/* Higher order procedures are defined like any other procedure: some
arguments are simply procedures -- which are then usually applied in
the definition.  This example defines a higher-order function Find
which expects a list Xs and a test function Fn: Find returns the first
element in Xs for which Fn returns true.

This example also demonstrates the pattern-matching case statement
with multiple clauses operating on the list Xs.  In case Xs is the
empty list nil, then Find returns nil.  Otherwise (multiple clauses are
separated with the keyword []), Xs is matched with X|Xr, where X is
bound to the first element of Xs and Xr to the list's tail or
rest.  The function Find then checks whether {Fn X} returns true.  In
that case, the searched for list element has been found and is
returned.  Otherwise, Find is called recursively with the rest of the
list. */

local
   fun {Find Xs Fn}
      case Xs
      of nil then nil
      [] X|Xr
      then if {Fn X} then X 
	   else {Find Xr Fn}
	   end
      end 
   end
in
   {Browse {Find  [1 2 3 4 5 6] IsEven}}
end
</src>

* Concurrency

Oz provides excellent support for concurrent programming, where computations run in parallel in multiple threads.  We will only touch on this subject and discuss aspects relevant for Strasheela.  In general, however, concurrent programming plays a major role in Oz programming. 

The computations in different threads can communicate with each other via variables.  Multiple threads can use the same variable in a computation.  If the value of a variable does not present enough information for performing a specific operation, then the thread simply blocks and waits for more information.  In the example below, the addition X+3 can not be performed as long as the value of X is unknown.  As soon as more information about the variable value is available, the thread resumes its execution. 
  
This behaviour leads to a concurrent programming model which is highly declarative -- and thus easy to program in.  We will later see how this model simplifies the definition of complex musical constraint satisfaction problems (Oz' constraint programming model is based on concurrent programming).

The downside of this concurrency model is that it can result in an unintended blocking of a program which is not explicitly signalled (e.g. no error message is shown when a program blocks, because this is a normal program behaviour).  The second and third example below demonstrate a pragmatic way to deal with this downside. 

The examples demonstrates concurrent programming, but do not show a typical application (a typical application would be a program split in a server and one or more clients).  In the context of Strasheela, we will seldomly write concurrent programs explicitly.  Nevertheless, it is very important to know how concurrent programming works in Oz.  Even if we are not explicitly writing a concurrent program, constraint programming in Oz always results in a concurrent program.  Concurrent programming forms one of the foundations of Oz' constraint programming model, where each constraint (i.e. each propagator) is a concurrent agent running in its own thread.


** Declarative concurrency

<src lang="oz">
/* This example declares X and then browses 'hello' (just to show that
the browser works in principle).  However, the addition X+3 can not be
executed immediately and blocks.  Because this computation is executed
in its own thread, the top-level thread continues regardless, and
calls the procedure Delay, which waits for 3000 msecs.  After that
time, the top-level thread determines X to 4.  This awakes the other
thread: it can now compute X+3 and browse the sum. */

local
  X 
in
  {Browse hello}
  thread {Browse X + 3} end
  {Delay 3000}
  X = 4
end
</src>

** Blocking computation

<src lang="oz">
/* This example demonstrates a buggy program which does not signal any
error but simply does nothing.  The example is very similar to the
previous example, but does not place the blocking X+3 in its own
thread.  As a result, the whole program blocks at that point and never
executes X = 4. */

local
  X
in
  {Browse hello}
  %% !! blocks
  {Browse X+3}
  X = 4
end
</src>

** 'Signalling' a blocking computation

<src lang="oz">
/* This example demonstrates a pragmatic approach which checks for
blocking programs.  The example ends with the statement {Browse
endOfProgram}.  A non-blocking program will always execute this last
line of code and show 'endOfProgram' in the Browser.  However, a
blocking program (as the present one) does not do that and thus
indicates that it is blocking.  Although this little trick does not
tell us *where* the program blocks, the information *that* we wrote a
blocking program can prove very helpful already.  You may get a feel
for this trick by changing the example so that the message
'endOfProgram' is shown (e.g. comment the blocking statement out, or
surrounding it with a 'thread .. end' statement). */

local
  X
in
  {Browse hello}
  %% !! blocks
  {Browse X+3}
  X = 4
end
{Browse endOfProgram}
</src>
